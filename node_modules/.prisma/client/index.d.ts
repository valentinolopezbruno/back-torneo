
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model categoria
 * 
 */
export type categoria = $Result.DefaultSelection<Prisma.$categoriaPayload>
/**
 * Model cronograma
 * 
 */
export type cronograma = $Result.DefaultSelection<Prisma.$cronogramaPayload>
/**
 * Model Equipo
 * 
 */
export type Equipo = $Result.DefaultSelection<Prisma.$EquipoPayload>
/**
 * Model Jugador
 * 
 */
export type Jugador = $Result.DefaultSelection<Prisma.$JugadorPayload>
/**
 * Model partido
 * 
 */
export type partido = $Result.DefaultSelection<Prisma.$partidoPayload>
/**
 * Model torneo
 * 
 */
export type torneo = $Result.DefaultSelection<Prisma.$torneoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categorias
 * const categorias = await prisma.categoria.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categorias
   * const categorias = await prisma.categoria.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.categoria`: Exposes CRUD operations for the **categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.categoriaDelegate<ExtArgs>;

  /**
   * `prisma.cronograma`: Exposes CRUD operations for the **cronograma** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cronogramas
    * const cronogramas = await prisma.cronograma.findMany()
    * ```
    */
  get cronograma(): Prisma.cronogramaDelegate<ExtArgs>;

  /**
   * `prisma.equipo`: Exposes CRUD operations for the **Equipo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Equipos
    * const equipos = await prisma.equipo.findMany()
    * ```
    */
  get equipo(): Prisma.EquipoDelegate<ExtArgs>;

  /**
   * `prisma.jugador`: Exposes CRUD operations for the **Jugador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jugadors
    * const jugadors = await prisma.jugador.findMany()
    * ```
    */
  get jugador(): Prisma.JugadorDelegate<ExtArgs>;

  /**
   * `prisma.partido`: Exposes CRUD operations for the **partido** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partidos
    * const partidos = await prisma.partido.findMany()
    * ```
    */
  get partido(): Prisma.partidoDelegate<ExtArgs>;

  /**
   * `prisma.torneo`: Exposes CRUD operations for the **torneo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Torneos
    * const torneos = await prisma.torneo.findMany()
    * ```
    */
  get torneo(): Prisma.torneoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.1
   * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    categoria: 'categoria',
    cronograma: 'cronograma',
    Equipo: 'Equipo',
    Jugador: 'Jugador',
    partido: 'partido',
    torneo: 'torneo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'categoria' | 'cronograma' | 'equipo' | 'jugador' | 'partido' | 'torneo'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      categoria: {
        payload: Prisma.$categoriaPayload<ExtArgs>
        fields: Prisma.categoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          findFirst: {
            args: Prisma.categoriaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          findMany: {
            args: Prisma.categoriaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>[]
          }
          create: {
            args: Prisma.categoriaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          createMany: {
            args: Prisma.categoriaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoriaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          update: {
            args: Prisma.categoriaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          deleteMany: {
            args: Prisma.categoriaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoriaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoriaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          aggregate: {
            args: Prisma.CategoriaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategoria>
          }
          groupBy: {
            args: Prisma.categoriaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriaCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaCountAggregateOutputType> | number
          }
        }
      }
      cronograma: {
        payload: Prisma.$cronogramaPayload<ExtArgs>
        fields: Prisma.cronogramaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cronogramaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cronogramaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cronogramaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cronogramaPayload>
          }
          findFirst: {
            args: Prisma.cronogramaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cronogramaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cronogramaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cronogramaPayload>
          }
          findMany: {
            args: Prisma.cronogramaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cronogramaPayload>[]
          }
          create: {
            args: Prisma.cronogramaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cronogramaPayload>
          }
          createMany: {
            args: Prisma.cronogramaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.cronogramaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cronogramaPayload>
          }
          update: {
            args: Prisma.cronogramaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cronogramaPayload>
          }
          deleteMany: {
            args: Prisma.cronogramaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.cronogramaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.cronogramaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cronogramaPayload>
          }
          aggregate: {
            args: Prisma.CronogramaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCronograma>
          }
          groupBy: {
            args: Prisma.cronogramaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CronogramaGroupByOutputType>[]
          }
          count: {
            args: Prisma.cronogramaCountArgs<ExtArgs>,
            result: $Utils.Optional<CronogramaCountAggregateOutputType> | number
          }
        }
      }
      Equipo: {
        payload: Prisma.$EquipoPayload<ExtArgs>
        fields: Prisma.EquipoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EquipoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EquipoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipoPayload>
          }
          findFirst: {
            args: Prisma.EquipoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EquipoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipoPayload>
          }
          findMany: {
            args: Prisma.EquipoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipoPayload>[]
          }
          create: {
            args: Prisma.EquipoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipoPayload>
          }
          createMany: {
            args: Prisma.EquipoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EquipoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipoPayload>
          }
          update: {
            args: Prisma.EquipoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipoPayload>
          }
          deleteMany: {
            args: Prisma.EquipoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EquipoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EquipoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipoPayload>
          }
          aggregate: {
            args: Prisma.EquipoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEquipo>
          }
          groupBy: {
            args: Prisma.EquipoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EquipoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EquipoCountArgs<ExtArgs>,
            result: $Utils.Optional<EquipoCountAggregateOutputType> | number
          }
        }
      }
      Jugador: {
        payload: Prisma.$JugadorPayload<ExtArgs>
        fields: Prisma.JugadorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JugadorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JugadorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload>
          }
          findFirst: {
            args: Prisma.JugadorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JugadorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload>
          }
          findMany: {
            args: Prisma.JugadorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload>[]
          }
          create: {
            args: Prisma.JugadorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload>
          }
          createMany: {
            args: Prisma.JugadorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.JugadorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload>
          }
          update: {
            args: Prisma.JugadorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload>
          }
          deleteMany: {
            args: Prisma.JugadorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.JugadorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.JugadorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload>
          }
          aggregate: {
            args: Prisma.JugadorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateJugador>
          }
          groupBy: {
            args: Prisma.JugadorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<JugadorGroupByOutputType>[]
          }
          count: {
            args: Prisma.JugadorCountArgs<ExtArgs>,
            result: $Utils.Optional<JugadorCountAggregateOutputType> | number
          }
        }
      }
      partido: {
        payload: Prisma.$partidoPayload<ExtArgs>
        fields: Prisma.partidoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.partidoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$partidoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.partidoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$partidoPayload>
          }
          findFirst: {
            args: Prisma.partidoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$partidoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.partidoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$partidoPayload>
          }
          findMany: {
            args: Prisma.partidoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$partidoPayload>[]
          }
          create: {
            args: Prisma.partidoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$partidoPayload>
          }
          createMany: {
            args: Prisma.partidoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.partidoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$partidoPayload>
          }
          update: {
            args: Prisma.partidoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$partidoPayload>
          }
          deleteMany: {
            args: Prisma.partidoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.partidoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.partidoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$partidoPayload>
          }
          aggregate: {
            args: Prisma.PartidoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePartido>
          }
          groupBy: {
            args: Prisma.partidoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PartidoGroupByOutputType>[]
          }
          count: {
            args: Prisma.partidoCountArgs<ExtArgs>,
            result: $Utils.Optional<PartidoCountAggregateOutputType> | number
          }
        }
      }
      torneo: {
        payload: Prisma.$torneoPayload<ExtArgs>
        fields: Prisma.torneoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.torneoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$torneoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.torneoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$torneoPayload>
          }
          findFirst: {
            args: Prisma.torneoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$torneoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.torneoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$torneoPayload>
          }
          findMany: {
            args: Prisma.torneoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$torneoPayload>[]
          }
          create: {
            args: Prisma.torneoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$torneoPayload>
          }
          createMany: {
            args: Prisma.torneoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.torneoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$torneoPayload>
          }
          update: {
            args: Prisma.torneoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$torneoPayload>
          }
          deleteMany: {
            args: Prisma.torneoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.torneoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.torneoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$torneoPayload>
          }
          aggregate: {
            args: Prisma.TorneoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTorneo>
          }
          groupBy: {
            args: Prisma.torneoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TorneoGroupByOutputType>[]
          }
          count: {
            args: Prisma.torneoCountArgs<ExtArgs>,
            result: $Utils.Optional<TorneoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EquipoCountOutputType
   */

  export type EquipoCountOutputType = {
    jugadores: number
  }

  export type EquipoCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    jugadores?: boolean | EquipoCountOutputTypeCountJugadoresArgs
  }

  // Custom InputTypes

  /**
   * EquipoCountOutputType without action
   */
  export type EquipoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipoCountOutputType
     */
    select?: EquipoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EquipoCountOutputType without action
   */
  export type EquipoCountOutputTypeCountJugadoresArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: JugadorWhereInput
  }



  /**
   * Count Type TorneoCountOutputType
   */

  export type TorneoCountOutputType = {
    categorias: number
  }

  export type TorneoCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    categorias?: boolean | TorneoCountOutputTypeCountCategoriasArgs
  }

  // Custom InputTypes

  /**
   * TorneoCountOutputType without action
   */
  export type TorneoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TorneoCountOutputType
     */
    select?: TorneoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TorneoCountOutputType without action
   */
  export type TorneoCountOutputTypeCountCategoriasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: categoriaWhereInput
  }



  /**
   * Models
   */

  /**
   * Model categoria
   */

  export type AggregateCategoria = {
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaAvgAggregateOutputType = {
    id: number | null
    idTorneo: number | null
  }

  export type CategoriaSumAggregateOutputType = {
    id: number | null
    idTorneo: number | null
  }

  export type CategoriaMinAggregateOutputType = {
    id: number | null
    idTorneo: number | null
    nombre: string | null
    dificultad: string | null
  }

  export type CategoriaMaxAggregateOutputType = {
    id: number | null
    idTorneo: number | null
    nombre: string | null
    dificultad: string | null
  }

  export type CategoriaCountAggregateOutputType = {
    id: number
    idTorneo: number
    nombre: number
    dificultad: number
    _all: number
  }


  export type CategoriaAvgAggregateInputType = {
    id?: true
    idTorneo?: true
  }

  export type CategoriaSumAggregateInputType = {
    id?: true
    idTorneo?: true
  }

  export type CategoriaMinAggregateInputType = {
    id?: true
    idTorneo?: true
    nombre?: true
    dificultad?: true
  }

  export type CategoriaMaxAggregateInputType = {
    id?: true
    idTorneo?: true
    nombre?: true
    dificultad?: true
  }

  export type CategoriaCountAggregateInputType = {
    id?: true
    idTorneo?: true
    nombre?: true
    dificultad?: true
    _all?: true
  }

  export type CategoriaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which categoria to aggregate.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categorias
    **/
    _count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }




  export type categoriaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: categoriaWhereInput
    orderBy?: categoriaOrderByWithAggregationInput | categoriaOrderByWithAggregationInput[]
    by: CategoriaScalarFieldEnum[] | CategoriaScalarFieldEnum
    having?: categoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaCountAggregateInputType | true
    _avg?: CategoriaAvgAggregateInputType
    _sum?: CategoriaSumAggregateInputType
    _min?: CategoriaMinAggregateInputType
    _max?: CategoriaMaxAggregateInputType
  }

  export type CategoriaGroupByOutputType = {
    id: number
    idTorneo: number
    nombre: string
    dificultad: string
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends categoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
        }
      >
    >


  export type categoriaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idTorneo?: boolean
    nombre?: boolean
    dificultad?: boolean
    torneo?: boolean | categoria$torneoArgs<ExtArgs>
  }, ExtArgs["result"]["categoria"]>

  export type categoriaSelectScalar = {
    id?: boolean
    idTorneo?: boolean
    nombre?: boolean
    dificultad?: boolean
  }

  export type categoriaInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    torneo?: boolean | categoria$torneoArgs<ExtArgs>
  }


  export type $categoriaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "categoria"
    objects: {
      torneo: Prisma.$torneoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: number
      idTorneo: number
      nombre: string
      dificultad: string
    }, ExtArgs["result"]["categoria"]>
    composites: {}
  }


  type categoriaGetPayload<S extends boolean | null | undefined | categoriaDefaultArgs> = $Result.GetResult<Prisma.$categoriaPayload, S>

  type categoriaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<categoriaFindManyArgs, 'select' | 'include'> & {
      select?: CategoriaCountAggregateInputType | true
    }

  export interface categoriaDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categoria'], meta: { name: 'categoria' } }
    /**
     * Find zero or one Categoria that matches the filter.
     * @param {categoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaFindUniqueArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categoria that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoriaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindFirstArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoriaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaWithIdOnly = await prisma.categoria.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoriaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categoria.
     * @param {categoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
    **/
    create<T extends categoriaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaCreateArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categorias.
     *     @param {categoriaCreateManyArgs} args - Arguments to create many Categorias.
     *     @example
     *     // Create many Categorias
     *     const categoria = await prisma.categoria.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categoria.
     * @param {categoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
    **/
    delete<T extends categoriaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaDeleteArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categoria.
     * @param {categoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaUpdateArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {categoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria.
     * @param {categoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
    **/
    upsert<T extends categoriaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaUpsertArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends categoriaCountArgs>(
      args?: Subset<T, categoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriaGroupByArgs['orderBy'] }
        : { orderBy?: categoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categoria model
   */
  readonly fields: categoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    torneo<T extends categoria$torneoArgs<ExtArgs> = {}>(args?: Subset<T, categoria$torneoArgs<ExtArgs>>): Prisma__torneoClient<$Result.GetResult<Prisma.$torneoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the categoria model
   */ 
  interface categoriaFieldRefs {
    readonly id: FieldRef<"categoria", 'Int'>
    readonly idTorneo: FieldRef<"categoria", 'Int'>
    readonly nombre: FieldRef<"categoria", 'String'>
    readonly dificultad: FieldRef<"categoria", 'String'>
  }
    

  // Custom InputTypes

  /**
   * categoria findUnique
   */
  export type categoriaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria findUniqueOrThrow
   */
  export type categoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria findFirst
   */
  export type categoriaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * categoria findFirstOrThrow
   */
  export type categoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * categoria findMany
   */
  export type categoriaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categorias.
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * categoria create
   */
  export type categoriaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a categoria.
     */
    data: XOR<categoriaCreateInput, categoriaUncheckedCreateInput>
  }


  /**
   * categoria createMany
   */
  export type categoriaCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categorias.
     */
    data: categoriaCreateManyInput | categoriaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * categoria update
   */
  export type categoriaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a categoria.
     */
    data: XOR<categoriaUpdateInput, categoriaUncheckedUpdateInput>
    /**
     * Choose, which categoria to update.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria updateMany
   */
  export type categoriaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categorias.
     */
    data: XOR<categoriaUpdateManyMutationInput, categoriaUncheckedUpdateManyInput>
    /**
     * Filter which categorias to update
     */
    where?: categoriaWhereInput
  }


  /**
   * categoria upsert
   */
  export type categoriaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the categoria to update in case it exists.
     */
    where: categoriaWhereUniqueInput
    /**
     * In case the categoria found by the `where` argument doesn't exist, create a new categoria with this data.
     */
    create: XOR<categoriaCreateInput, categoriaUncheckedCreateInput>
    /**
     * In case the categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriaUpdateInput, categoriaUncheckedUpdateInput>
  }


  /**
   * categoria delete
   */
  export type categoriaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter which categoria to delete.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria deleteMany
   */
  export type categoriaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which categorias to delete
     */
    where?: categoriaWhereInput
  }


  /**
   * categoria.torneo
   */
  export type categoria$torneoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the torneo
     */
    select?: torneoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: torneoInclude<ExtArgs> | null
    where?: torneoWhereInput
  }


  /**
   * categoria without action
   */
  export type categoriaDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
  }



  /**
   * Model cronograma
   */

  export type AggregateCronograma = {
    _count: CronogramaCountAggregateOutputType | null
    _avg: CronogramaAvgAggregateOutputType | null
    _sum: CronogramaSumAggregateOutputType | null
    _min: CronogramaMinAggregateOutputType | null
    _max: CronogramaMaxAggregateOutputType | null
  }

  export type CronogramaAvgAggregateOutputType = {
    id: number | null
    idCategoria: number | null
    idPartido: number | null
    idEquipo: number | null
    fecha: number | null
    hora: number | null
  }

  export type CronogramaSumAggregateOutputType = {
    id: number | null
    idCategoria: number | null
    idPartido: number | null
    idEquipo: number | null
    fecha: number | null
    hora: number | null
  }

  export type CronogramaMinAggregateOutputType = {
    id: number | null
    idCategoria: number | null
    idPartido: number | null
    idEquipo: number | null
    fecha: number | null
    hora: number | null
  }

  export type CronogramaMaxAggregateOutputType = {
    id: number | null
    idCategoria: number | null
    idPartido: number | null
    idEquipo: number | null
    fecha: number | null
    hora: number | null
  }

  export type CronogramaCountAggregateOutputType = {
    id: number
    idCategoria: number
    idPartido: number
    idEquipo: number
    fecha: number
    hora: number
    _all: number
  }


  export type CronogramaAvgAggregateInputType = {
    id?: true
    idCategoria?: true
    idPartido?: true
    idEquipo?: true
    fecha?: true
    hora?: true
  }

  export type CronogramaSumAggregateInputType = {
    id?: true
    idCategoria?: true
    idPartido?: true
    idEquipo?: true
    fecha?: true
    hora?: true
  }

  export type CronogramaMinAggregateInputType = {
    id?: true
    idCategoria?: true
    idPartido?: true
    idEquipo?: true
    fecha?: true
    hora?: true
  }

  export type CronogramaMaxAggregateInputType = {
    id?: true
    idCategoria?: true
    idPartido?: true
    idEquipo?: true
    fecha?: true
    hora?: true
  }

  export type CronogramaCountAggregateInputType = {
    id?: true
    idCategoria?: true
    idPartido?: true
    idEquipo?: true
    fecha?: true
    hora?: true
    _all?: true
  }

  export type CronogramaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which cronograma to aggregate.
     */
    where?: cronogramaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cronogramas to fetch.
     */
    orderBy?: cronogramaOrderByWithRelationInput | cronogramaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cronogramaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cronogramas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cronogramas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cronogramas
    **/
    _count?: true | CronogramaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CronogramaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CronogramaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CronogramaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CronogramaMaxAggregateInputType
  }

  export type GetCronogramaAggregateType<T extends CronogramaAggregateArgs> = {
        [P in keyof T & keyof AggregateCronograma]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCronograma[P]>
      : GetScalarType<T[P], AggregateCronograma[P]>
  }




  export type cronogramaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: cronogramaWhereInput
    orderBy?: cronogramaOrderByWithAggregationInput | cronogramaOrderByWithAggregationInput[]
    by: CronogramaScalarFieldEnum[] | CronogramaScalarFieldEnum
    having?: cronogramaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CronogramaCountAggregateInputType | true
    _avg?: CronogramaAvgAggregateInputType
    _sum?: CronogramaSumAggregateInputType
    _min?: CronogramaMinAggregateInputType
    _max?: CronogramaMaxAggregateInputType
  }

  export type CronogramaGroupByOutputType = {
    id: number
    idCategoria: number
    idPartido: number
    idEquipo: number
    fecha: number
    hora: number
    _count: CronogramaCountAggregateOutputType | null
    _avg: CronogramaAvgAggregateOutputType | null
    _sum: CronogramaSumAggregateOutputType | null
    _min: CronogramaMinAggregateOutputType | null
    _max: CronogramaMaxAggregateOutputType | null
  }

  type GetCronogramaGroupByPayload<T extends cronogramaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CronogramaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CronogramaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CronogramaGroupByOutputType[P]>
            : GetScalarType<T[P], CronogramaGroupByOutputType[P]>
        }
      >
    >


  export type cronogramaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idCategoria?: boolean
    idPartido?: boolean
    idEquipo?: boolean
    fecha?: boolean
    hora?: boolean
  }, ExtArgs["result"]["cronograma"]>

  export type cronogramaSelectScalar = {
    id?: boolean
    idCategoria?: boolean
    idPartido?: boolean
    idEquipo?: boolean
    fecha?: boolean
    hora?: boolean
  }


  export type $cronogramaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "cronograma"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      idCategoria: number
      idPartido: number
      idEquipo: number
      fecha: number
      hora: number
    }, ExtArgs["result"]["cronograma"]>
    composites: {}
  }


  type cronogramaGetPayload<S extends boolean | null | undefined | cronogramaDefaultArgs> = $Result.GetResult<Prisma.$cronogramaPayload, S>

  type cronogramaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<cronogramaFindManyArgs, 'select' | 'include'> & {
      select?: CronogramaCountAggregateInputType | true
    }

  export interface cronogramaDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cronograma'], meta: { name: 'cronograma' } }
    /**
     * Find zero or one Cronograma that matches the filter.
     * @param {cronogramaFindUniqueArgs} args - Arguments to find a Cronograma
     * @example
     * // Get one Cronograma
     * const cronograma = await prisma.cronograma.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cronogramaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, cronogramaFindUniqueArgs<ExtArgs>>
    ): Prisma__cronogramaClient<$Result.GetResult<Prisma.$cronogramaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cronograma that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {cronogramaFindUniqueOrThrowArgs} args - Arguments to find a Cronograma
     * @example
     * // Get one Cronograma
     * const cronograma = await prisma.cronograma.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cronogramaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cronogramaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__cronogramaClient<$Result.GetResult<Prisma.$cronogramaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cronograma that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cronogramaFindFirstArgs} args - Arguments to find a Cronograma
     * @example
     * // Get one Cronograma
     * const cronograma = await prisma.cronograma.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cronogramaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, cronogramaFindFirstArgs<ExtArgs>>
    ): Prisma__cronogramaClient<$Result.GetResult<Prisma.$cronogramaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cronograma that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cronogramaFindFirstOrThrowArgs} args - Arguments to find a Cronograma
     * @example
     * // Get one Cronograma
     * const cronograma = await prisma.cronograma.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cronogramaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cronogramaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__cronogramaClient<$Result.GetResult<Prisma.$cronogramaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cronogramas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cronogramaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cronogramas
     * const cronogramas = await prisma.cronograma.findMany()
     * 
     * // Get first 10 Cronogramas
     * const cronogramas = await prisma.cronograma.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cronogramaWithIdOnly = await prisma.cronograma.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends cronogramaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cronogramaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cronogramaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cronograma.
     * @param {cronogramaCreateArgs} args - Arguments to create a Cronograma.
     * @example
     * // Create one Cronograma
     * const Cronograma = await prisma.cronograma.create({
     *   data: {
     *     // ... data to create a Cronograma
     *   }
     * })
     * 
    **/
    create<T extends cronogramaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, cronogramaCreateArgs<ExtArgs>>
    ): Prisma__cronogramaClient<$Result.GetResult<Prisma.$cronogramaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cronogramas.
     *     @param {cronogramaCreateManyArgs} args - Arguments to create many Cronogramas.
     *     @example
     *     // Create many Cronogramas
     *     const cronograma = await prisma.cronograma.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cronogramaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cronogramaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cronograma.
     * @param {cronogramaDeleteArgs} args - Arguments to delete one Cronograma.
     * @example
     * // Delete one Cronograma
     * const Cronograma = await prisma.cronograma.delete({
     *   where: {
     *     // ... filter to delete one Cronograma
     *   }
     * })
     * 
    **/
    delete<T extends cronogramaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, cronogramaDeleteArgs<ExtArgs>>
    ): Prisma__cronogramaClient<$Result.GetResult<Prisma.$cronogramaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cronograma.
     * @param {cronogramaUpdateArgs} args - Arguments to update one Cronograma.
     * @example
     * // Update one Cronograma
     * const cronograma = await prisma.cronograma.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cronogramaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, cronogramaUpdateArgs<ExtArgs>>
    ): Prisma__cronogramaClient<$Result.GetResult<Prisma.$cronogramaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cronogramas.
     * @param {cronogramaDeleteManyArgs} args - Arguments to filter Cronogramas to delete.
     * @example
     * // Delete a few Cronogramas
     * const { count } = await prisma.cronograma.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cronogramaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cronogramaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cronogramas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cronogramaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cronogramas
     * const cronograma = await prisma.cronograma.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cronogramaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, cronogramaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cronograma.
     * @param {cronogramaUpsertArgs} args - Arguments to update or create a Cronograma.
     * @example
     * // Update or create a Cronograma
     * const cronograma = await prisma.cronograma.upsert({
     *   create: {
     *     // ... data to create a Cronograma
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cronograma we want to update
     *   }
     * })
    **/
    upsert<T extends cronogramaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, cronogramaUpsertArgs<ExtArgs>>
    ): Prisma__cronogramaClient<$Result.GetResult<Prisma.$cronogramaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cronogramas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cronogramaCountArgs} args - Arguments to filter Cronogramas to count.
     * @example
     * // Count the number of Cronogramas
     * const count = await prisma.cronograma.count({
     *   where: {
     *     // ... the filter for the Cronogramas we want to count
     *   }
     * })
    **/
    count<T extends cronogramaCountArgs>(
      args?: Subset<T, cronogramaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CronogramaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cronograma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CronogramaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CronogramaAggregateArgs>(args: Subset<T, CronogramaAggregateArgs>): Prisma.PrismaPromise<GetCronogramaAggregateType<T>>

    /**
     * Group by Cronograma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cronogramaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cronogramaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cronogramaGroupByArgs['orderBy'] }
        : { orderBy?: cronogramaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cronogramaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCronogramaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cronograma model
   */
  readonly fields: cronogramaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cronograma.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cronogramaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the cronograma model
   */ 
  interface cronogramaFieldRefs {
    readonly id: FieldRef<"cronograma", 'Int'>
    readonly idCategoria: FieldRef<"cronograma", 'Int'>
    readonly idPartido: FieldRef<"cronograma", 'Int'>
    readonly idEquipo: FieldRef<"cronograma", 'Int'>
    readonly fecha: FieldRef<"cronograma", 'Int'>
    readonly hora: FieldRef<"cronograma", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * cronograma findUnique
   */
  export type cronogramaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cronograma
     */
    select?: cronogramaSelect<ExtArgs> | null
    /**
     * Filter, which cronograma to fetch.
     */
    where: cronogramaWhereUniqueInput
  }


  /**
   * cronograma findUniqueOrThrow
   */
  export type cronogramaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cronograma
     */
    select?: cronogramaSelect<ExtArgs> | null
    /**
     * Filter, which cronograma to fetch.
     */
    where: cronogramaWhereUniqueInput
  }


  /**
   * cronograma findFirst
   */
  export type cronogramaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cronograma
     */
    select?: cronogramaSelect<ExtArgs> | null
    /**
     * Filter, which cronograma to fetch.
     */
    where?: cronogramaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cronogramas to fetch.
     */
    orderBy?: cronogramaOrderByWithRelationInput | cronogramaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cronogramas.
     */
    cursor?: cronogramaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cronogramas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cronogramas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cronogramas.
     */
    distinct?: CronogramaScalarFieldEnum | CronogramaScalarFieldEnum[]
  }


  /**
   * cronograma findFirstOrThrow
   */
  export type cronogramaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cronograma
     */
    select?: cronogramaSelect<ExtArgs> | null
    /**
     * Filter, which cronograma to fetch.
     */
    where?: cronogramaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cronogramas to fetch.
     */
    orderBy?: cronogramaOrderByWithRelationInput | cronogramaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cronogramas.
     */
    cursor?: cronogramaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cronogramas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cronogramas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cronogramas.
     */
    distinct?: CronogramaScalarFieldEnum | CronogramaScalarFieldEnum[]
  }


  /**
   * cronograma findMany
   */
  export type cronogramaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cronograma
     */
    select?: cronogramaSelect<ExtArgs> | null
    /**
     * Filter, which cronogramas to fetch.
     */
    where?: cronogramaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cronogramas to fetch.
     */
    orderBy?: cronogramaOrderByWithRelationInput | cronogramaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cronogramas.
     */
    cursor?: cronogramaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cronogramas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cronogramas.
     */
    skip?: number
    distinct?: CronogramaScalarFieldEnum | CronogramaScalarFieldEnum[]
  }


  /**
   * cronograma create
   */
  export type cronogramaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cronograma
     */
    select?: cronogramaSelect<ExtArgs> | null
    /**
     * The data needed to create a cronograma.
     */
    data: XOR<cronogramaCreateInput, cronogramaUncheckedCreateInput>
  }


  /**
   * cronograma createMany
   */
  export type cronogramaCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cronogramas.
     */
    data: cronogramaCreateManyInput | cronogramaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * cronograma update
   */
  export type cronogramaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cronograma
     */
    select?: cronogramaSelect<ExtArgs> | null
    /**
     * The data needed to update a cronograma.
     */
    data: XOR<cronogramaUpdateInput, cronogramaUncheckedUpdateInput>
    /**
     * Choose, which cronograma to update.
     */
    where: cronogramaWhereUniqueInput
  }


  /**
   * cronograma updateMany
   */
  export type cronogramaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cronogramas.
     */
    data: XOR<cronogramaUpdateManyMutationInput, cronogramaUncheckedUpdateManyInput>
    /**
     * Filter which cronogramas to update
     */
    where?: cronogramaWhereInput
  }


  /**
   * cronograma upsert
   */
  export type cronogramaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cronograma
     */
    select?: cronogramaSelect<ExtArgs> | null
    /**
     * The filter to search for the cronograma to update in case it exists.
     */
    where: cronogramaWhereUniqueInput
    /**
     * In case the cronograma found by the `where` argument doesn't exist, create a new cronograma with this data.
     */
    create: XOR<cronogramaCreateInput, cronogramaUncheckedCreateInput>
    /**
     * In case the cronograma was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cronogramaUpdateInput, cronogramaUncheckedUpdateInput>
  }


  /**
   * cronograma delete
   */
  export type cronogramaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cronograma
     */
    select?: cronogramaSelect<ExtArgs> | null
    /**
     * Filter which cronograma to delete.
     */
    where: cronogramaWhereUniqueInput
  }


  /**
   * cronograma deleteMany
   */
  export type cronogramaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which cronogramas to delete
     */
    where?: cronogramaWhereInput
  }


  /**
   * cronograma without action
   */
  export type cronogramaDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cronograma
     */
    select?: cronogramaSelect<ExtArgs> | null
  }



  /**
   * Model Equipo
   */

  export type AggregateEquipo = {
    _count: EquipoCountAggregateOutputType | null
    _avg: EquipoAvgAggregateOutputType | null
    _sum: EquipoSumAggregateOutputType | null
    _min: EquipoMinAggregateOutputType | null
    _max: EquipoMaxAggregateOutputType | null
  }

  export type EquipoAvgAggregateOutputType = {
    id: number | null
    idCategoria: number | null
  }

  export type EquipoSumAggregateOutputType = {
    id: number | null
    idCategoria: number | null
  }

  export type EquipoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    idCategoria: number | null
  }

  export type EquipoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    idCategoria: number | null
  }

  export type EquipoCountAggregateOutputType = {
    id: number
    nombre: number
    idCategoria: number
    _all: number
  }


  export type EquipoAvgAggregateInputType = {
    id?: true
    idCategoria?: true
  }

  export type EquipoSumAggregateInputType = {
    id?: true
    idCategoria?: true
  }

  export type EquipoMinAggregateInputType = {
    id?: true
    nombre?: true
    idCategoria?: true
  }

  export type EquipoMaxAggregateInputType = {
    id?: true
    nombre?: true
    idCategoria?: true
  }

  export type EquipoCountAggregateInputType = {
    id?: true
    nombre?: true
    idCategoria?: true
    _all?: true
  }

  export type EquipoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipo to aggregate.
     */
    where?: EquipoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipos to fetch.
     */
    orderBy?: EquipoOrderByWithRelationInput | EquipoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EquipoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Equipos
    **/
    _count?: true | EquipoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EquipoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EquipoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquipoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquipoMaxAggregateInputType
  }

  export type GetEquipoAggregateType<T extends EquipoAggregateArgs> = {
        [P in keyof T & keyof AggregateEquipo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquipo[P]>
      : GetScalarType<T[P], AggregateEquipo[P]>
  }




  export type EquipoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EquipoWhereInput
    orderBy?: EquipoOrderByWithAggregationInput | EquipoOrderByWithAggregationInput[]
    by: EquipoScalarFieldEnum[] | EquipoScalarFieldEnum
    having?: EquipoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquipoCountAggregateInputType | true
    _avg?: EquipoAvgAggregateInputType
    _sum?: EquipoSumAggregateInputType
    _min?: EquipoMinAggregateInputType
    _max?: EquipoMaxAggregateInputType
  }

  export type EquipoGroupByOutputType = {
    id: number
    nombre: string
    idCategoria: number
    _count: EquipoCountAggregateOutputType | null
    _avg: EquipoAvgAggregateOutputType | null
    _sum: EquipoSumAggregateOutputType | null
    _min: EquipoMinAggregateOutputType | null
    _max: EquipoMaxAggregateOutputType | null
  }

  type GetEquipoGroupByPayload<T extends EquipoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EquipoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquipoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquipoGroupByOutputType[P]>
            : GetScalarType<T[P], EquipoGroupByOutputType[P]>
        }
      >
    >


  export type EquipoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    idCategoria?: boolean
    jugadores?: boolean | Equipo$jugadoresArgs<ExtArgs>
    _count?: boolean | EquipoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equipo"]>

  export type EquipoSelectScalar = {
    id?: boolean
    nombre?: boolean
    idCategoria?: boolean
  }

  export type EquipoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    jugadores?: boolean | Equipo$jugadoresArgs<ExtArgs>
    _count?: boolean | EquipoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EquipoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Equipo"
    objects: {
      jugadores: Prisma.$JugadorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nombre: string
      idCategoria: number
    }, ExtArgs["result"]["equipo"]>
    composites: {}
  }


  type EquipoGetPayload<S extends boolean | null | undefined | EquipoDefaultArgs> = $Result.GetResult<Prisma.$EquipoPayload, S>

  type EquipoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<EquipoFindManyArgs, 'select' | 'include'> & {
      select?: EquipoCountAggregateInputType | true
    }

  export interface EquipoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Equipo'], meta: { name: 'Equipo' } }
    /**
     * Find zero or one Equipo that matches the filter.
     * @param {EquipoFindUniqueArgs} args - Arguments to find a Equipo
     * @example
     * // Get one Equipo
     * const equipo = await prisma.equipo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EquipoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EquipoFindUniqueArgs<ExtArgs>>
    ): Prisma__EquipoClient<$Result.GetResult<Prisma.$EquipoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Equipo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EquipoFindUniqueOrThrowArgs} args - Arguments to find a Equipo
     * @example
     * // Get one Equipo
     * const equipo = await prisma.equipo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EquipoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EquipoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EquipoClient<$Result.GetResult<Prisma.$EquipoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Equipo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipoFindFirstArgs} args - Arguments to find a Equipo
     * @example
     * // Get one Equipo
     * const equipo = await prisma.equipo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EquipoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EquipoFindFirstArgs<ExtArgs>>
    ): Prisma__EquipoClient<$Result.GetResult<Prisma.$EquipoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Equipo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipoFindFirstOrThrowArgs} args - Arguments to find a Equipo
     * @example
     * // Get one Equipo
     * const equipo = await prisma.equipo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EquipoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EquipoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EquipoClient<$Result.GetResult<Prisma.$EquipoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Equipos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Equipos
     * const equipos = await prisma.equipo.findMany()
     * 
     * // Get first 10 Equipos
     * const equipos = await prisma.equipo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const equipoWithIdOnly = await prisma.equipo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EquipoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EquipoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Equipo.
     * @param {EquipoCreateArgs} args - Arguments to create a Equipo.
     * @example
     * // Create one Equipo
     * const Equipo = await prisma.equipo.create({
     *   data: {
     *     // ... data to create a Equipo
     *   }
     * })
     * 
    **/
    create<T extends EquipoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EquipoCreateArgs<ExtArgs>>
    ): Prisma__EquipoClient<$Result.GetResult<Prisma.$EquipoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Equipos.
     *     @param {EquipoCreateManyArgs} args - Arguments to create many Equipos.
     *     @example
     *     // Create many Equipos
     *     const equipo = await prisma.equipo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EquipoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EquipoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Equipo.
     * @param {EquipoDeleteArgs} args - Arguments to delete one Equipo.
     * @example
     * // Delete one Equipo
     * const Equipo = await prisma.equipo.delete({
     *   where: {
     *     // ... filter to delete one Equipo
     *   }
     * })
     * 
    **/
    delete<T extends EquipoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EquipoDeleteArgs<ExtArgs>>
    ): Prisma__EquipoClient<$Result.GetResult<Prisma.$EquipoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Equipo.
     * @param {EquipoUpdateArgs} args - Arguments to update one Equipo.
     * @example
     * // Update one Equipo
     * const equipo = await prisma.equipo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EquipoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EquipoUpdateArgs<ExtArgs>>
    ): Prisma__EquipoClient<$Result.GetResult<Prisma.$EquipoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Equipos.
     * @param {EquipoDeleteManyArgs} args - Arguments to filter Equipos to delete.
     * @example
     * // Delete a few Equipos
     * const { count } = await prisma.equipo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EquipoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EquipoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Equipos
     * const equipo = await prisma.equipo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EquipoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EquipoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Equipo.
     * @param {EquipoUpsertArgs} args - Arguments to update or create a Equipo.
     * @example
     * // Update or create a Equipo
     * const equipo = await prisma.equipo.upsert({
     *   create: {
     *     // ... data to create a Equipo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Equipo we want to update
     *   }
     * })
    **/
    upsert<T extends EquipoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EquipoUpsertArgs<ExtArgs>>
    ): Prisma__EquipoClient<$Result.GetResult<Prisma.$EquipoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Equipos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipoCountArgs} args - Arguments to filter Equipos to count.
     * @example
     * // Count the number of Equipos
     * const count = await prisma.equipo.count({
     *   where: {
     *     // ... the filter for the Equipos we want to count
     *   }
     * })
    **/
    count<T extends EquipoCountArgs>(
      args?: Subset<T, EquipoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquipoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Equipo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquipoAggregateArgs>(args: Subset<T, EquipoAggregateArgs>): Prisma.PrismaPromise<GetEquipoAggregateType<T>>

    /**
     * Group by Equipo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EquipoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EquipoGroupByArgs['orderBy'] }
        : { orderBy?: EquipoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EquipoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquipoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Equipo model
   */
  readonly fields: EquipoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Equipo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EquipoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    jugadores<T extends Equipo$jugadoresArgs<ExtArgs> = {}>(args?: Subset<T, Equipo$jugadoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Equipo model
   */ 
  interface EquipoFieldRefs {
    readonly id: FieldRef<"Equipo", 'Int'>
    readonly nombre: FieldRef<"Equipo", 'String'>
    readonly idCategoria: FieldRef<"Equipo", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Equipo findUnique
   */
  export type EquipoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipo
     */
    select?: EquipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipoInclude<ExtArgs> | null
    /**
     * Filter, which Equipo to fetch.
     */
    where: EquipoWhereUniqueInput
  }


  /**
   * Equipo findUniqueOrThrow
   */
  export type EquipoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipo
     */
    select?: EquipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipoInclude<ExtArgs> | null
    /**
     * Filter, which Equipo to fetch.
     */
    where: EquipoWhereUniqueInput
  }


  /**
   * Equipo findFirst
   */
  export type EquipoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipo
     */
    select?: EquipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipoInclude<ExtArgs> | null
    /**
     * Filter, which Equipo to fetch.
     */
    where?: EquipoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipos to fetch.
     */
    orderBy?: EquipoOrderByWithRelationInput | EquipoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipos.
     */
    cursor?: EquipoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipos.
     */
    distinct?: EquipoScalarFieldEnum | EquipoScalarFieldEnum[]
  }


  /**
   * Equipo findFirstOrThrow
   */
  export type EquipoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipo
     */
    select?: EquipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipoInclude<ExtArgs> | null
    /**
     * Filter, which Equipo to fetch.
     */
    where?: EquipoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipos to fetch.
     */
    orderBy?: EquipoOrderByWithRelationInput | EquipoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipos.
     */
    cursor?: EquipoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipos.
     */
    distinct?: EquipoScalarFieldEnum | EquipoScalarFieldEnum[]
  }


  /**
   * Equipo findMany
   */
  export type EquipoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipo
     */
    select?: EquipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipoInclude<ExtArgs> | null
    /**
     * Filter, which Equipos to fetch.
     */
    where?: EquipoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipos to fetch.
     */
    orderBy?: EquipoOrderByWithRelationInput | EquipoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Equipos.
     */
    cursor?: EquipoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipos.
     */
    skip?: number
    distinct?: EquipoScalarFieldEnum | EquipoScalarFieldEnum[]
  }


  /**
   * Equipo create
   */
  export type EquipoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipo
     */
    select?: EquipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipoInclude<ExtArgs> | null
    /**
     * The data needed to create a Equipo.
     */
    data: XOR<EquipoCreateInput, EquipoUncheckedCreateInput>
  }


  /**
   * Equipo createMany
   */
  export type EquipoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Equipos.
     */
    data: EquipoCreateManyInput | EquipoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Equipo update
   */
  export type EquipoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipo
     */
    select?: EquipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipoInclude<ExtArgs> | null
    /**
     * The data needed to update a Equipo.
     */
    data: XOR<EquipoUpdateInput, EquipoUncheckedUpdateInput>
    /**
     * Choose, which Equipo to update.
     */
    where: EquipoWhereUniqueInput
  }


  /**
   * Equipo updateMany
   */
  export type EquipoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Equipos.
     */
    data: XOR<EquipoUpdateManyMutationInput, EquipoUncheckedUpdateManyInput>
    /**
     * Filter which Equipos to update
     */
    where?: EquipoWhereInput
  }


  /**
   * Equipo upsert
   */
  export type EquipoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipo
     */
    select?: EquipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipoInclude<ExtArgs> | null
    /**
     * The filter to search for the Equipo to update in case it exists.
     */
    where: EquipoWhereUniqueInput
    /**
     * In case the Equipo found by the `where` argument doesn't exist, create a new Equipo with this data.
     */
    create: XOR<EquipoCreateInput, EquipoUncheckedCreateInput>
    /**
     * In case the Equipo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EquipoUpdateInput, EquipoUncheckedUpdateInput>
  }


  /**
   * Equipo delete
   */
  export type EquipoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipo
     */
    select?: EquipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipoInclude<ExtArgs> | null
    /**
     * Filter which Equipo to delete.
     */
    where: EquipoWhereUniqueInput
  }


  /**
   * Equipo deleteMany
   */
  export type EquipoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipos to delete
     */
    where?: EquipoWhereInput
  }


  /**
   * Equipo.jugadores
   */
  export type Equipo$jugadoresArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JugadorInclude<ExtArgs> | null
    where?: JugadorWhereInput
    orderBy?: JugadorOrderByWithRelationInput | JugadorOrderByWithRelationInput[]
    cursor?: JugadorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JugadorScalarFieldEnum | JugadorScalarFieldEnum[]
  }


  /**
   * Equipo without action
   */
  export type EquipoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipo
     */
    select?: EquipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipoInclude<ExtArgs> | null
  }



  /**
   * Model Jugador
   */

  export type AggregateJugador = {
    _count: JugadorCountAggregateOutputType | null
    _avg: JugadorAvgAggregateOutputType | null
    _sum: JugadorSumAggregateOutputType | null
    _min: JugadorMinAggregateOutputType | null
    _max: JugadorMaxAggregateOutputType | null
  }

  export type JugadorAvgAggregateOutputType = {
    id: number | null
    roll: number | null
    idEqupo: number | null
  }

  export type JugadorSumAggregateOutputType = {
    id: number | null
    roll: number | null
    idEqupo: number | null
  }

  export type JugadorMinAggregateOutputType = {
    id: number | null
    roll: number | null
    nombre: string | null
    dni: string | null
    imagen: string | null
    idEqupo: number | null
  }

  export type JugadorMaxAggregateOutputType = {
    id: number | null
    roll: number | null
    nombre: string | null
    dni: string | null
    imagen: string | null
    idEqupo: number | null
  }

  export type JugadorCountAggregateOutputType = {
    id: number
    roll: number
    nombre: number
    dni: number
    imagen: number
    idEqupo: number
    _all: number
  }


  export type JugadorAvgAggregateInputType = {
    id?: true
    roll?: true
    idEqupo?: true
  }

  export type JugadorSumAggregateInputType = {
    id?: true
    roll?: true
    idEqupo?: true
  }

  export type JugadorMinAggregateInputType = {
    id?: true
    roll?: true
    nombre?: true
    dni?: true
    imagen?: true
    idEqupo?: true
  }

  export type JugadorMaxAggregateInputType = {
    id?: true
    roll?: true
    nombre?: true
    dni?: true
    imagen?: true
    idEqupo?: true
  }

  export type JugadorCountAggregateInputType = {
    id?: true
    roll?: true
    nombre?: true
    dni?: true
    imagen?: true
    idEqupo?: true
    _all?: true
  }

  export type JugadorAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jugador to aggregate.
     */
    where?: JugadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jugadors to fetch.
     */
    orderBy?: JugadorOrderByWithRelationInput | JugadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JugadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jugadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jugadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jugadors
    **/
    _count?: true | JugadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JugadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JugadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JugadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JugadorMaxAggregateInputType
  }

  export type GetJugadorAggregateType<T extends JugadorAggregateArgs> = {
        [P in keyof T & keyof AggregateJugador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJugador[P]>
      : GetScalarType<T[P], AggregateJugador[P]>
  }




  export type JugadorGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: JugadorWhereInput
    orderBy?: JugadorOrderByWithAggregationInput | JugadorOrderByWithAggregationInput[]
    by: JugadorScalarFieldEnum[] | JugadorScalarFieldEnum
    having?: JugadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JugadorCountAggregateInputType | true
    _avg?: JugadorAvgAggregateInputType
    _sum?: JugadorSumAggregateInputType
    _min?: JugadorMinAggregateInputType
    _max?: JugadorMaxAggregateInputType
  }

  export type JugadorGroupByOutputType = {
    id: number
    roll: number
    nombre: string
    dni: string
    imagen: string
    idEqupo: number | null
    _count: JugadorCountAggregateOutputType | null
    _avg: JugadorAvgAggregateOutputType | null
    _sum: JugadorSumAggregateOutputType | null
    _min: JugadorMinAggregateOutputType | null
    _max: JugadorMaxAggregateOutputType | null
  }

  type GetJugadorGroupByPayload<T extends JugadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JugadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JugadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JugadorGroupByOutputType[P]>
            : GetScalarType<T[P], JugadorGroupByOutputType[P]>
        }
      >
    >


  export type JugadorSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roll?: boolean
    nombre?: boolean
    dni?: boolean
    imagen?: boolean
    idEqupo?: boolean
    equipo?: boolean | Jugador$equipoArgs<ExtArgs>
  }, ExtArgs["result"]["jugador"]>

  export type JugadorSelectScalar = {
    id?: boolean
    roll?: boolean
    nombre?: boolean
    dni?: boolean
    imagen?: boolean
    idEqupo?: boolean
  }

  export type JugadorInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    equipo?: boolean | Jugador$equipoArgs<ExtArgs>
  }


  export type $JugadorPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Jugador"
    objects: {
      equipo: Prisma.$EquipoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: number
      roll: number
      nombre: string
      dni: string
      imagen: string
      idEqupo: number | null
    }, ExtArgs["result"]["jugador"]>
    composites: {}
  }


  type JugadorGetPayload<S extends boolean | null | undefined | JugadorDefaultArgs> = $Result.GetResult<Prisma.$JugadorPayload, S>

  type JugadorCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<JugadorFindManyArgs, 'select' | 'include'> & {
      select?: JugadorCountAggregateInputType | true
    }

  export interface JugadorDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Jugador'], meta: { name: 'Jugador' } }
    /**
     * Find zero or one Jugador that matches the filter.
     * @param {JugadorFindUniqueArgs} args - Arguments to find a Jugador
     * @example
     * // Get one Jugador
     * const jugador = await prisma.jugador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JugadorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, JugadorFindUniqueArgs<ExtArgs>>
    ): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Jugador that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {JugadorFindUniqueOrThrowArgs} args - Arguments to find a Jugador
     * @example
     * // Get one Jugador
     * const jugador = await prisma.jugador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends JugadorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JugadorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Jugador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadorFindFirstArgs} args - Arguments to find a Jugador
     * @example
     * // Get one Jugador
     * const jugador = await prisma.jugador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JugadorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, JugadorFindFirstArgs<ExtArgs>>
    ): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Jugador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadorFindFirstOrThrowArgs} args - Arguments to find a Jugador
     * @example
     * // Get one Jugador
     * const jugador = await prisma.jugador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends JugadorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JugadorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Jugadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jugadors
     * const jugadors = await prisma.jugador.findMany()
     * 
     * // Get first 10 Jugadors
     * const jugadors = await prisma.jugador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jugadorWithIdOnly = await prisma.jugador.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JugadorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JugadorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Jugador.
     * @param {JugadorCreateArgs} args - Arguments to create a Jugador.
     * @example
     * // Create one Jugador
     * const Jugador = await prisma.jugador.create({
     *   data: {
     *     // ... data to create a Jugador
     *   }
     * })
     * 
    **/
    create<T extends JugadorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, JugadorCreateArgs<ExtArgs>>
    ): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Jugadors.
     *     @param {JugadorCreateManyArgs} args - Arguments to create many Jugadors.
     *     @example
     *     // Create many Jugadors
     *     const jugador = await prisma.jugador.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JugadorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JugadorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Jugador.
     * @param {JugadorDeleteArgs} args - Arguments to delete one Jugador.
     * @example
     * // Delete one Jugador
     * const Jugador = await prisma.jugador.delete({
     *   where: {
     *     // ... filter to delete one Jugador
     *   }
     * })
     * 
    **/
    delete<T extends JugadorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, JugadorDeleteArgs<ExtArgs>>
    ): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Jugador.
     * @param {JugadorUpdateArgs} args - Arguments to update one Jugador.
     * @example
     * // Update one Jugador
     * const jugador = await prisma.jugador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JugadorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, JugadorUpdateArgs<ExtArgs>>
    ): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Jugadors.
     * @param {JugadorDeleteManyArgs} args - Arguments to filter Jugadors to delete.
     * @example
     * // Delete a few Jugadors
     * const { count } = await prisma.jugador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JugadorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JugadorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jugadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jugadors
     * const jugador = await prisma.jugador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JugadorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, JugadorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Jugador.
     * @param {JugadorUpsertArgs} args - Arguments to update or create a Jugador.
     * @example
     * // Update or create a Jugador
     * const jugador = await prisma.jugador.upsert({
     *   create: {
     *     // ... data to create a Jugador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jugador we want to update
     *   }
     * })
    **/
    upsert<T extends JugadorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, JugadorUpsertArgs<ExtArgs>>
    ): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Jugadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadorCountArgs} args - Arguments to filter Jugadors to count.
     * @example
     * // Count the number of Jugadors
     * const count = await prisma.jugador.count({
     *   where: {
     *     // ... the filter for the Jugadors we want to count
     *   }
     * })
    **/
    count<T extends JugadorCountArgs>(
      args?: Subset<T, JugadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JugadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jugador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JugadorAggregateArgs>(args: Subset<T, JugadorAggregateArgs>): Prisma.PrismaPromise<GetJugadorAggregateType<T>>

    /**
     * Group by Jugador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JugadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JugadorGroupByArgs['orderBy'] }
        : { orderBy?: JugadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JugadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJugadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Jugador model
   */
  readonly fields: JugadorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Jugador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JugadorClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    equipo<T extends Jugador$equipoArgs<ExtArgs> = {}>(args?: Subset<T, Jugador$equipoArgs<ExtArgs>>): Prisma__EquipoClient<$Result.GetResult<Prisma.$EquipoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Jugador model
   */ 
  interface JugadorFieldRefs {
    readonly id: FieldRef<"Jugador", 'Int'>
    readonly roll: FieldRef<"Jugador", 'Int'>
    readonly nombre: FieldRef<"Jugador", 'String'>
    readonly dni: FieldRef<"Jugador", 'String'>
    readonly imagen: FieldRef<"Jugador", 'String'>
    readonly idEqupo: FieldRef<"Jugador", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Jugador findUnique
   */
  export type JugadorFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * Filter, which Jugador to fetch.
     */
    where: JugadorWhereUniqueInput
  }


  /**
   * Jugador findUniqueOrThrow
   */
  export type JugadorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * Filter, which Jugador to fetch.
     */
    where: JugadorWhereUniqueInput
  }


  /**
   * Jugador findFirst
   */
  export type JugadorFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * Filter, which Jugador to fetch.
     */
    where?: JugadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jugadors to fetch.
     */
    orderBy?: JugadorOrderByWithRelationInput | JugadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jugadors.
     */
    cursor?: JugadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jugadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jugadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jugadors.
     */
    distinct?: JugadorScalarFieldEnum | JugadorScalarFieldEnum[]
  }


  /**
   * Jugador findFirstOrThrow
   */
  export type JugadorFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * Filter, which Jugador to fetch.
     */
    where?: JugadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jugadors to fetch.
     */
    orderBy?: JugadorOrderByWithRelationInput | JugadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jugadors.
     */
    cursor?: JugadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jugadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jugadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jugadors.
     */
    distinct?: JugadorScalarFieldEnum | JugadorScalarFieldEnum[]
  }


  /**
   * Jugador findMany
   */
  export type JugadorFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * Filter, which Jugadors to fetch.
     */
    where?: JugadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jugadors to fetch.
     */
    orderBy?: JugadorOrderByWithRelationInput | JugadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jugadors.
     */
    cursor?: JugadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jugadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jugadors.
     */
    skip?: number
    distinct?: JugadorScalarFieldEnum | JugadorScalarFieldEnum[]
  }


  /**
   * Jugador create
   */
  export type JugadorCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * The data needed to create a Jugador.
     */
    data: XOR<JugadorCreateInput, JugadorUncheckedCreateInput>
  }


  /**
   * Jugador createMany
   */
  export type JugadorCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jugadors.
     */
    data: JugadorCreateManyInput | JugadorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Jugador update
   */
  export type JugadorUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * The data needed to update a Jugador.
     */
    data: XOR<JugadorUpdateInput, JugadorUncheckedUpdateInput>
    /**
     * Choose, which Jugador to update.
     */
    where: JugadorWhereUniqueInput
  }


  /**
   * Jugador updateMany
   */
  export type JugadorUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jugadors.
     */
    data: XOR<JugadorUpdateManyMutationInput, JugadorUncheckedUpdateManyInput>
    /**
     * Filter which Jugadors to update
     */
    where?: JugadorWhereInput
  }


  /**
   * Jugador upsert
   */
  export type JugadorUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * The filter to search for the Jugador to update in case it exists.
     */
    where: JugadorWhereUniqueInput
    /**
     * In case the Jugador found by the `where` argument doesn't exist, create a new Jugador with this data.
     */
    create: XOR<JugadorCreateInput, JugadorUncheckedCreateInput>
    /**
     * In case the Jugador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JugadorUpdateInput, JugadorUncheckedUpdateInput>
  }


  /**
   * Jugador delete
   */
  export type JugadorDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * Filter which Jugador to delete.
     */
    where: JugadorWhereUniqueInput
  }


  /**
   * Jugador deleteMany
   */
  export type JugadorDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jugadors to delete
     */
    where?: JugadorWhereInput
  }


  /**
   * Jugador.equipo
   */
  export type Jugador$equipoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipo
     */
    select?: EquipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipoInclude<ExtArgs> | null
    where?: EquipoWhereInput
  }


  /**
   * Jugador without action
   */
  export type JugadorDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JugadorInclude<ExtArgs> | null
  }



  /**
   * Model partido
   */

  export type AggregatePartido = {
    _count: PartidoCountAggregateOutputType | null
    _avg: PartidoAvgAggregateOutputType | null
    _sum: PartidoSumAggregateOutputType | null
    _min: PartidoMinAggregateOutputType | null
    _max: PartidoMaxAggregateOutputType | null
  }

  export type PartidoAvgAggregateOutputType = {
    id: number | null
    estado: number | null
    equipo1: number | null
    equipo2: number | null
  }

  export type PartidoSumAggregateOutputType = {
    id: number | null
    estado: number | null
    equipo1: number | null
    equipo2: number | null
  }

  export type PartidoMinAggregateOutputType = {
    id: number | null
    estado: number | null
    equipo1: number | null
    equipo2: number | null
    hora: string | null
    fecha: Date | null
  }

  export type PartidoMaxAggregateOutputType = {
    id: number | null
    estado: number | null
    equipo1: number | null
    equipo2: number | null
    hora: string | null
    fecha: Date | null
  }

  export type PartidoCountAggregateOutputType = {
    id: number
    estado: number
    equipo1: number
    equipo2: number
    hora: number
    fecha: number
    _all: number
  }


  export type PartidoAvgAggregateInputType = {
    id?: true
    estado?: true
    equipo1?: true
    equipo2?: true
  }

  export type PartidoSumAggregateInputType = {
    id?: true
    estado?: true
    equipo1?: true
    equipo2?: true
  }

  export type PartidoMinAggregateInputType = {
    id?: true
    estado?: true
    equipo1?: true
    equipo2?: true
    hora?: true
    fecha?: true
  }

  export type PartidoMaxAggregateInputType = {
    id?: true
    estado?: true
    equipo1?: true
    equipo2?: true
    hora?: true
    fecha?: true
  }

  export type PartidoCountAggregateInputType = {
    id?: true
    estado?: true
    equipo1?: true
    equipo2?: true
    hora?: true
    fecha?: true
    _all?: true
  }

  export type PartidoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which partido to aggregate.
     */
    where?: partidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of partidos to fetch.
     */
    orderBy?: partidoOrderByWithRelationInput | partidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: partidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned partidos
    **/
    _count?: true | PartidoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartidoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartidoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartidoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartidoMaxAggregateInputType
  }

  export type GetPartidoAggregateType<T extends PartidoAggregateArgs> = {
        [P in keyof T & keyof AggregatePartido]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartido[P]>
      : GetScalarType<T[P], AggregatePartido[P]>
  }




  export type partidoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: partidoWhereInput
    orderBy?: partidoOrderByWithAggregationInput | partidoOrderByWithAggregationInput[]
    by: PartidoScalarFieldEnum[] | PartidoScalarFieldEnum
    having?: partidoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartidoCountAggregateInputType | true
    _avg?: PartidoAvgAggregateInputType
    _sum?: PartidoSumAggregateInputType
    _min?: PartidoMinAggregateInputType
    _max?: PartidoMaxAggregateInputType
  }

  export type PartidoGroupByOutputType = {
    id: number
    estado: number
    equipo1: number
    equipo2: number
    hora: string
    fecha: Date
    _count: PartidoCountAggregateOutputType | null
    _avg: PartidoAvgAggregateOutputType | null
    _sum: PartidoSumAggregateOutputType | null
    _min: PartidoMinAggregateOutputType | null
    _max: PartidoMaxAggregateOutputType | null
  }

  type GetPartidoGroupByPayload<T extends partidoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartidoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartidoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartidoGroupByOutputType[P]>
            : GetScalarType<T[P], PartidoGroupByOutputType[P]>
        }
      >
    >


  export type partidoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    estado?: boolean
    equipo1?: boolean
    equipo2?: boolean
    hora?: boolean
    fecha?: boolean
  }, ExtArgs["result"]["partido"]>

  export type partidoSelectScalar = {
    id?: boolean
    estado?: boolean
    equipo1?: boolean
    equipo2?: boolean
    hora?: boolean
    fecha?: boolean
  }


  export type $partidoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "partido"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      estado: number
      equipo1: number
      equipo2: number
      hora: string
      fecha: Date
    }, ExtArgs["result"]["partido"]>
    composites: {}
  }


  type partidoGetPayload<S extends boolean | null | undefined | partidoDefaultArgs> = $Result.GetResult<Prisma.$partidoPayload, S>

  type partidoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<partidoFindManyArgs, 'select' | 'include'> & {
      select?: PartidoCountAggregateInputType | true
    }

  export interface partidoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['partido'], meta: { name: 'partido' } }
    /**
     * Find zero or one Partido that matches the filter.
     * @param {partidoFindUniqueArgs} args - Arguments to find a Partido
     * @example
     * // Get one Partido
     * const partido = await prisma.partido.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends partidoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, partidoFindUniqueArgs<ExtArgs>>
    ): Prisma__partidoClient<$Result.GetResult<Prisma.$partidoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Partido that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {partidoFindUniqueOrThrowArgs} args - Arguments to find a Partido
     * @example
     * // Get one Partido
     * const partido = await prisma.partido.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends partidoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, partidoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__partidoClient<$Result.GetResult<Prisma.$partidoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Partido that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidoFindFirstArgs} args - Arguments to find a Partido
     * @example
     * // Get one Partido
     * const partido = await prisma.partido.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends partidoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, partidoFindFirstArgs<ExtArgs>>
    ): Prisma__partidoClient<$Result.GetResult<Prisma.$partidoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Partido that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidoFindFirstOrThrowArgs} args - Arguments to find a Partido
     * @example
     * // Get one Partido
     * const partido = await prisma.partido.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends partidoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, partidoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__partidoClient<$Result.GetResult<Prisma.$partidoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Partidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partidos
     * const partidos = await prisma.partido.findMany()
     * 
     * // Get first 10 Partidos
     * const partidos = await prisma.partido.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partidoWithIdOnly = await prisma.partido.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends partidoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, partidoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$partidoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Partido.
     * @param {partidoCreateArgs} args - Arguments to create a Partido.
     * @example
     * // Create one Partido
     * const Partido = await prisma.partido.create({
     *   data: {
     *     // ... data to create a Partido
     *   }
     * })
     * 
    **/
    create<T extends partidoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, partidoCreateArgs<ExtArgs>>
    ): Prisma__partidoClient<$Result.GetResult<Prisma.$partidoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Partidos.
     *     @param {partidoCreateManyArgs} args - Arguments to create many Partidos.
     *     @example
     *     // Create many Partidos
     *     const partido = await prisma.partido.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends partidoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, partidoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Partido.
     * @param {partidoDeleteArgs} args - Arguments to delete one Partido.
     * @example
     * // Delete one Partido
     * const Partido = await prisma.partido.delete({
     *   where: {
     *     // ... filter to delete one Partido
     *   }
     * })
     * 
    **/
    delete<T extends partidoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, partidoDeleteArgs<ExtArgs>>
    ): Prisma__partidoClient<$Result.GetResult<Prisma.$partidoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Partido.
     * @param {partidoUpdateArgs} args - Arguments to update one Partido.
     * @example
     * // Update one Partido
     * const partido = await prisma.partido.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends partidoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, partidoUpdateArgs<ExtArgs>>
    ): Prisma__partidoClient<$Result.GetResult<Prisma.$partidoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Partidos.
     * @param {partidoDeleteManyArgs} args - Arguments to filter Partidos to delete.
     * @example
     * // Delete a few Partidos
     * const { count } = await prisma.partido.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends partidoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, partidoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partidos
     * const partido = await prisma.partido.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends partidoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, partidoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Partido.
     * @param {partidoUpsertArgs} args - Arguments to update or create a Partido.
     * @example
     * // Update or create a Partido
     * const partido = await prisma.partido.upsert({
     *   create: {
     *     // ... data to create a Partido
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partido we want to update
     *   }
     * })
    **/
    upsert<T extends partidoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, partidoUpsertArgs<ExtArgs>>
    ): Prisma__partidoClient<$Result.GetResult<Prisma.$partidoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Partidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidoCountArgs} args - Arguments to filter Partidos to count.
     * @example
     * // Count the number of Partidos
     * const count = await prisma.partido.count({
     *   where: {
     *     // ... the filter for the Partidos we want to count
     *   }
     * })
    **/
    count<T extends partidoCountArgs>(
      args?: Subset<T, partidoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartidoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Partido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartidoAggregateArgs>(args: Subset<T, PartidoAggregateArgs>): Prisma.PrismaPromise<GetPartidoAggregateType<T>>

    /**
     * Group by Partido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends partidoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: partidoGroupByArgs['orderBy'] }
        : { orderBy?: partidoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, partidoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartidoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the partido model
   */
  readonly fields: partidoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for partido.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__partidoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the partido model
   */ 
  interface partidoFieldRefs {
    readonly id: FieldRef<"partido", 'Int'>
    readonly estado: FieldRef<"partido", 'Int'>
    readonly equipo1: FieldRef<"partido", 'Int'>
    readonly equipo2: FieldRef<"partido", 'Int'>
    readonly hora: FieldRef<"partido", 'String'>
    readonly fecha: FieldRef<"partido", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * partido findUnique
   */
  export type partidoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partido
     */
    select?: partidoSelect<ExtArgs> | null
    /**
     * Filter, which partido to fetch.
     */
    where: partidoWhereUniqueInput
  }


  /**
   * partido findUniqueOrThrow
   */
  export type partidoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partido
     */
    select?: partidoSelect<ExtArgs> | null
    /**
     * Filter, which partido to fetch.
     */
    where: partidoWhereUniqueInput
  }


  /**
   * partido findFirst
   */
  export type partidoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partido
     */
    select?: partidoSelect<ExtArgs> | null
    /**
     * Filter, which partido to fetch.
     */
    where?: partidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of partidos to fetch.
     */
    orderBy?: partidoOrderByWithRelationInput | partidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for partidos.
     */
    cursor?: partidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of partidos.
     */
    distinct?: PartidoScalarFieldEnum | PartidoScalarFieldEnum[]
  }


  /**
   * partido findFirstOrThrow
   */
  export type partidoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partido
     */
    select?: partidoSelect<ExtArgs> | null
    /**
     * Filter, which partido to fetch.
     */
    where?: partidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of partidos to fetch.
     */
    orderBy?: partidoOrderByWithRelationInput | partidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for partidos.
     */
    cursor?: partidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of partidos.
     */
    distinct?: PartidoScalarFieldEnum | PartidoScalarFieldEnum[]
  }


  /**
   * partido findMany
   */
  export type partidoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partido
     */
    select?: partidoSelect<ExtArgs> | null
    /**
     * Filter, which partidos to fetch.
     */
    where?: partidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of partidos to fetch.
     */
    orderBy?: partidoOrderByWithRelationInput | partidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing partidos.
     */
    cursor?: partidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partidos.
     */
    skip?: number
    distinct?: PartidoScalarFieldEnum | PartidoScalarFieldEnum[]
  }


  /**
   * partido create
   */
  export type partidoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partido
     */
    select?: partidoSelect<ExtArgs> | null
    /**
     * The data needed to create a partido.
     */
    data: XOR<partidoCreateInput, partidoUncheckedCreateInput>
  }


  /**
   * partido createMany
   */
  export type partidoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many partidos.
     */
    data: partidoCreateManyInput | partidoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * partido update
   */
  export type partidoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partido
     */
    select?: partidoSelect<ExtArgs> | null
    /**
     * The data needed to update a partido.
     */
    data: XOR<partidoUpdateInput, partidoUncheckedUpdateInput>
    /**
     * Choose, which partido to update.
     */
    where: partidoWhereUniqueInput
  }


  /**
   * partido updateMany
   */
  export type partidoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update partidos.
     */
    data: XOR<partidoUpdateManyMutationInput, partidoUncheckedUpdateManyInput>
    /**
     * Filter which partidos to update
     */
    where?: partidoWhereInput
  }


  /**
   * partido upsert
   */
  export type partidoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partido
     */
    select?: partidoSelect<ExtArgs> | null
    /**
     * The filter to search for the partido to update in case it exists.
     */
    where: partidoWhereUniqueInput
    /**
     * In case the partido found by the `where` argument doesn't exist, create a new partido with this data.
     */
    create: XOR<partidoCreateInput, partidoUncheckedCreateInput>
    /**
     * In case the partido was found with the provided `where` argument, update it with this data.
     */
    update: XOR<partidoUpdateInput, partidoUncheckedUpdateInput>
  }


  /**
   * partido delete
   */
  export type partidoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partido
     */
    select?: partidoSelect<ExtArgs> | null
    /**
     * Filter which partido to delete.
     */
    where: partidoWhereUniqueInput
  }


  /**
   * partido deleteMany
   */
  export type partidoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which partidos to delete
     */
    where?: partidoWhereInput
  }


  /**
   * partido without action
   */
  export type partidoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partido
     */
    select?: partidoSelect<ExtArgs> | null
  }



  /**
   * Model torneo
   */

  export type AggregateTorneo = {
    _count: TorneoCountAggregateOutputType | null
    _avg: TorneoAvgAggregateOutputType | null
    _sum: TorneoSumAggregateOutputType | null
    _min: TorneoMinAggregateOutputType | null
    _max: TorneoMaxAggregateOutputType | null
  }

  export type TorneoAvgAggregateOutputType = {
    id: number | null
  }

  export type TorneoSumAggregateOutputType = {
    id: number | null
  }

  export type TorneoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type TorneoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type TorneoCountAggregateOutputType = {
    id: number
    nombre: number
    _all: number
  }


  export type TorneoAvgAggregateInputType = {
    id?: true
  }

  export type TorneoSumAggregateInputType = {
    id?: true
  }

  export type TorneoMinAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type TorneoMaxAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type TorneoCountAggregateInputType = {
    id?: true
    nombre?: true
    _all?: true
  }

  export type TorneoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which torneo to aggregate.
     */
    where?: torneoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of torneos to fetch.
     */
    orderBy?: torneoOrderByWithRelationInput | torneoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: torneoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` torneos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` torneos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned torneos
    **/
    _count?: true | TorneoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TorneoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TorneoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TorneoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TorneoMaxAggregateInputType
  }

  export type GetTorneoAggregateType<T extends TorneoAggregateArgs> = {
        [P in keyof T & keyof AggregateTorneo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTorneo[P]>
      : GetScalarType<T[P], AggregateTorneo[P]>
  }




  export type torneoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: torneoWhereInput
    orderBy?: torneoOrderByWithAggregationInput | torneoOrderByWithAggregationInput[]
    by: TorneoScalarFieldEnum[] | TorneoScalarFieldEnum
    having?: torneoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TorneoCountAggregateInputType | true
    _avg?: TorneoAvgAggregateInputType
    _sum?: TorneoSumAggregateInputType
    _min?: TorneoMinAggregateInputType
    _max?: TorneoMaxAggregateInputType
  }

  export type TorneoGroupByOutputType = {
    id: number
    nombre: string
    _count: TorneoCountAggregateOutputType | null
    _avg: TorneoAvgAggregateOutputType | null
    _sum: TorneoSumAggregateOutputType | null
    _min: TorneoMinAggregateOutputType | null
    _max: TorneoMaxAggregateOutputType | null
  }

  type GetTorneoGroupByPayload<T extends torneoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TorneoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TorneoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TorneoGroupByOutputType[P]>
            : GetScalarType<T[P], TorneoGroupByOutputType[P]>
        }
      >
    >


  export type torneoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    categorias?: boolean | torneo$categoriasArgs<ExtArgs>
    _count?: boolean | TorneoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["torneo"]>

  export type torneoSelectScalar = {
    id?: boolean
    nombre?: boolean
  }

  export type torneoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    categorias?: boolean | torneo$categoriasArgs<ExtArgs>
    _count?: boolean | TorneoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $torneoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "torneo"
    objects: {
      categorias: Prisma.$categoriaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nombre: string
    }, ExtArgs["result"]["torneo"]>
    composites: {}
  }


  type torneoGetPayload<S extends boolean | null | undefined | torneoDefaultArgs> = $Result.GetResult<Prisma.$torneoPayload, S>

  type torneoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<torneoFindManyArgs, 'select' | 'include'> & {
      select?: TorneoCountAggregateInputType | true
    }

  export interface torneoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['torneo'], meta: { name: 'torneo' } }
    /**
     * Find zero or one Torneo that matches the filter.
     * @param {torneoFindUniqueArgs} args - Arguments to find a Torneo
     * @example
     * // Get one Torneo
     * const torneo = await prisma.torneo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends torneoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, torneoFindUniqueArgs<ExtArgs>>
    ): Prisma__torneoClient<$Result.GetResult<Prisma.$torneoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Torneo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {torneoFindUniqueOrThrowArgs} args - Arguments to find a Torneo
     * @example
     * // Get one Torneo
     * const torneo = await prisma.torneo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends torneoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, torneoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__torneoClient<$Result.GetResult<Prisma.$torneoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Torneo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {torneoFindFirstArgs} args - Arguments to find a Torneo
     * @example
     * // Get one Torneo
     * const torneo = await prisma.torneo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends torneoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, torneoFindFirstArgs<ExtArgs>>
    ): Prisma__torneoClient<$Result.GetResult<Prisma.$torneoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Torneo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {torneoFindFirstOrThrowArgs} args - Arguments to find a Torneo
     * @example
     * // Get one Torneo
     * const torneo = await prisma.torneo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends torneoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, torneoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__torneoClient<$Result.GetResult<Prisma.$torneoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Torneos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {torneoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Torneos
     * const torneos = await prisma.torneo.findMany()
     * 
     * // Get first 10 Torneos
     * const torneos = await prisma.torneo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const torneoWithIdOnly = await prisma.torneo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends torneoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, torneoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$torneoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Torneo.
     * @param {torneoCreateArgs} args - Arguments to create a Torneo.
     * @example
     * // Create one Torneo
     * const Torneo = await prisma.torneo.create({
     *   data: {
     *     // ... data to create a Torneo
     *   }
     * })
     * 
    **/
    create<T extends torneoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, torneoCreateArgs<ExtArgs>>
    ): Prisma__torneoClient<$Result.GetResult<Prisma.$torneoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Torneos.
     *     @param {torneoCreateManyArgs} args - Arguments to create many Torneos.
     *     @example
     *     // Create many Torneos
     *     const torneo = await prisma.torneo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends torneoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, torneoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Torneo.
     * @param {torneoDeleteArgs} args - Arguments to delete one Torneo.
     * @example
     * // Delete one Torneo
     * const Torneo = await prisma.torneo.delete({
     *   where: {
     *     // ... filter to delete one Torneo
     *   }
     * })
     * 
    **/
    delete<T extends torneoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, torneoDeleteArgs<ExtArgs>>
    ): Prisma__torneoClient<$Result.GetResult<Prisma.$torneoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Torneo.
     * @param {torneoUpdateArgs} args - Arguments to update one Torneo.
     * @example
     * // Update one Torneo
     * const torneo = await prisma.torneo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends torneoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, torneoUpdateArgs<ExtArgs>>
    ): Prisma__torneoClient<$Result.GetResult<Prisma.$torneoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Torneos.
     * @param {torneoDeleteManyArgs} args - Arguments to filter Torneos to delete.
     * @example
     * // Delete a few Torneos
     * const { count } = await prisma.torneo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends torneoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, torneoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Torneos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {torneoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Torneos
     * const torneo = await prisma.torneo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends torneoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, torneoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Torneo.
     * @param {torneoUpsertArgs} args - Arguments to update or create a Torneo.
     * @example
     * // Update or create a Torneo
     * const torneo = await prisma.torneo.upsert({
     *   create: {
     *     // ... data to create a Torneo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Torneo we want to update
     *   }
     * })
    **/
    upsert<T extends torneoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, torneoUpsertArgs<ExtArgs>>
    ): Prisma__torneoClient<$Result.GetResult<Prisma.$torneoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Torneos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {torneoCountArgs} args - Arguments to filter Torneos to count.
     * @example
     * // Count the number of Torneos
     * const count = await prisma.torneo.count({
     *   where: {
     *     // ... the filter for the Torneos we want to count
     *   }
     * })
    **/
    count<T extends torneoCountArgs>(
      args?: Subset<T, torneoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TorneoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Torneo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TorneoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TorneoAggregateArgs>(args: Subset<T, TorneoAggregateArgs>): Prisma.PrismaPromise<GetTorneoAggregateType<T>>

    /**
     * Group by Torneo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {torneoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends torneoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: torneoGroupByArgs['orderBy'] }
        : { orderBy?: torneoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, torneoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTorneoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the torneo model
   */
  readonly fields: torneoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for torneo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__torneoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    categorias<T extends torneo$categoriasArgs<ExtArgs> = {}>(args?: Subset<T, torneo$categoriasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the torneo model
   */ 
  interface torneoFieldRefs {
    readonly id: FieldRef<"torneo", 'Int'>
    readonly nombre: FieldRef<"torneo", 'String'>
  }
    

  // Custom InputTypes

  /**
   * torneo findUnique
   */
  export type torneoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the torneo
     */
    select?: torneoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: torneoInclude<ExtArgs> | null
    /**
     * Filter, which torneo to fetch.
     */
    where: torneoWhereUniqueInput
  }


  /**
   * torneo findUniqueOrThrow
   */
  export type torneoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the torneo
     */
    select?: torneoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: torneoInclude<ExtArgs> | null
    /**
     * Filter, which torneo to fetch.
     */
    where: torneoWhereUniqueInput
  }


  /**
   * torneo findFirst
   */
  export type torneoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the torneo
     */
    select?: torneoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: torneoInclude<ExtArgs> | null
    /**
     * Filter, which torneo to fetch.
     */
    where?: torneoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of torneos to fetch.
     */
    orderBy?: torneoOrderByWithRelationInput | torneoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for torneos.
     */
    cursor?: torneoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` torneos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` torneos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of torneos.
     */
    distinct?: TorneoScalarFieldEnum | TorneoScalarFieldEnum[]
  }


  /**
   * torneo findFirstOrThrow
   */
  export type torneoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the torneo
     */
    select?: torneoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: torneoInclude<ExtArgs> | null
    /**
     * Filter, which torneo to fetch.
     */
    where?: torneoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of torneos to fetch.
     */
    orderBy?: torneoOrderByWithRelationInput | torneoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for torneos.
     */
    cursor?: torneoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` torneos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` torneos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of torneos.
     */
    distinct?: TorneoScalarFieldEnum | TorneoScalarFieldEnum[]
  }


  /**
   * torneo findMany
   */
  export type torneoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the torneo
     */
    select?: torneoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: torneoInclude<ExtArgs> | null
    /**
     * Filter, which torneos to fetch.
     */
    where?: torneoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of torneos to fetch.
     */
    orderBy?: torneoOrderByWithRelationInput | torneoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing torneos.
     */
    cursor?: torneoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` torneos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` torneos.
     */
    skip?: number
    distinct?: TorneoScalarFieldEnum | TorneoScalarFieldEnum[]
  }


  /**
   * torneo create
   */
  export type torneoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the torneo
     */
    select?: torneoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: torneoInclude<ExtArgs> | null
    /**
     * The data needed to create a torneo.
     */
    data: XOR<torneoCreateInput, torneoUncheckedCreateInput>
  }


  /**
   * torneo createMany
   */
  export type torneoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many torneos.
     */
    data: torneoCreateManyInput | torneoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * torneo update
   */
  export type torneoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the torneo
     */
    select?: torneoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: torneoInclude<ExtArgs> | null
    /**
     * The data needed to update a torneo.
     */
    data: XOR<torneoUpdateInput, torneoUncheckedUpdateInput>
    /**
     * Choose, which torneo to update.
     */
    where: torneoWhereUniqueInput
  }


  /**
   * torneo updateMany
   */
  export type torneoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update torneos.
     */
    data: XOR<torneoUpdateManyMutationInput, torneoUncheckedUpdateManyInput>
    /**
     * Filter which torneos to update
     */
    where?: torneoWhereInput
  }


  /**
   * torneo upsert
   */
  export type torneoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the torneo
     */
    select?: torneoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: torneoInclude<ExtArgs> | null
    /**
     * The filter to search for the torneo to update in case it exists.
     */
    where: torneoWhereUniqueInput
    /**
     * In case the torneo found by the `where` argument doesn't exist, create a new torneo with this data.
     */
    create: XOR<torneoCreateInput, torneoUncheckedCreateInput>
    /**
     * In case the torneo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<torneoUpdateInput, torneoUncheckedUpdateInput>
  }


  /**
   * torneo delete
   */
  export type torneoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the torneo
     */
    select?: torneoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: torneoInclude<ExtArgs> | null
    /**
     * Filter which torneo to delete.
     */
    where: torneoWhereUniqueInput
  }


  /**
   * torneo deleteMany
   */
  export type torneoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which torneos to delete
     */
    where?: torneoWhereInput
  }


  /**
   * torneo.categorias
   */
  export type torneo$categoriasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    where?: categoriaWhereInput
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    cursor?: categoriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * torneo without action
   */
  export type torneoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the torneo
     */
    select?: torneoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: torneoInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CategoriaScalarFieldEnum: {
    id: 'id',
    idTorneo: 'idTorneo',
    nombre: 'nombre',
    dificultad: 'dificultad'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const CronogramaScalarFieldEnum: {
    id: 'id',
    idCategoria: 'idCategoria',
    idPartido: 'idPartido',
    idEquipo: 'idEquipo',
    fecha: 'fecha',
    hora: 'hora'
  };

  export type CronogramaScalarFieldEnum = (typeof CronogramaScalarFieldEnum)[keyof typeof CronogramaScalarFieldEnum]


  export const EquipoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    idCategoria: 'idCategoria'
  };

  export type EquipoScalarFieldEnum = (typeof EquipoScalarFieldEnum)[keyof typeof EquipoScalarFieldEnum]


  export const JugadorScalarFieldEnum: {
    id: 'id',
    roll: 'roll',
    nombre: 'nombre',
    dni: 'dni',
    imagen: 'imagen',
    idEqupo: 'idEqupo'
  };

  export type JugadorScalarFieldEnum = (typeof JugadorScalarFieldEnum)[keyof typeof JugadorScalarFieldEnum]


  export const PartidoScalarFieldEnum: {
    id: 'id',
    estado: 'estado',
    equipo1: 'equipo1',
    equipo2: 'equipo2',
    hora: 'hora',
    fecha: 'fecha'
  };

  export type PartidoScalarFieldEnum = (typeof PartidoScalarFieldEnum)[keyof typeof PartidoScalarFieldEnum]


  export const TorneoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre'
  };

  export type TorneoScalarFieldEnum = (typeof TorneoScalarFieldEnum)[keyof typeof TorneoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type categoriaWhereInput = {
    AND?: categoriaWhereInput | categoriaWhereInput[]
    OR?: categoriaWhereInput[]
    NOT?: categoriaWhereInput | categoriaWhereInput[]
    id?: IntFilter<"categoria"> | number
    idTorneo?: IntFilter<"categoria"> | number
    nombre?: StringFilter<"categoria"> | string
    dificultad?: StringFilter<"categoria"> | string
    torneo?: XOR<TorneoNullableRelationFilter, torneoWhereInput> | null
  }

  export type categoriaOrderByWithRelationInput = {
    id?: SortOrder
    idTorneo?: SortOrder
    nombre?: SortOrder
    dificultad?: SortOrder
    torneo?: torneoOrderByWithRelationInput
  }

  export type categoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: categoriaWhereInput | categoriaWhereInput[]
    OR?: categoriaWhereInput[]
    NOT?: categoriaWhereInput | categoriaWhereInput[]
    idTorneo?: IntFilter<"categoria"> | number
    nombre?: StringFilter<"categoria"> | string
    dificultad?: StringFilter<"categoria"> | string
    torneo?: XOR<TorneoNullableRelationFilter, torneoWhereInput> | null
  }, "id">

  export type categoriaOrderByWithAggregationInput = {
    id?: SortOrder
    idTorneo?: SortOrder
    nombre?: SortOrder
    dificultad?: SortOrder
    _count?: categoriaCountOrderByAggregateInput
    _avg?: categoriaAvgOrderByAggregateInput
    _max?: categoriaMaxOrderByAggregateInput
    _min?: categoriaMinOrderByAggregateInput
    _sum?: categoriaSumOrderByAggregateInput
  }

  export type categoriaScalarWhereWithAggregatesInput = {
    AND?: categoriaScalarWhereWithAggregatesInput | categoriaScalarWhereWithAggregatesInput[]
    OR?: categoriaScalarWhereWithAggregatesInput[]
    NOT?: categoriaScalarWhereWithAggregatesInput | categoriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"categoria"> | number
    idTorneo?: IntWithAggregatesFilter<"categoria"> | number
    nombre?: StringWithAggregatesFilter<"categoria"> | string
    dificultad?: StringWithAggregatesFilter<"categoria"> | string
  }

  export type cronogramaWhereInput = {
    AND?: cronogramaWhereInput | cronogramaWhereInput[]
    OR?: cronogramaWhereInput[]
    NOT?: cronogramaWhereInput | cronogramaWhereInput[]
    id?: IntFilter<"cronograma"> | number
    idCategoria?: IntFilter<"cronograma"> | number
    idPartido?: IntFilter<"cronograma"> | number
    idEquipo?: IntFilter<"cronograma"> | number
    fecha?: IntFilter<"cronograma"> | number
    hora?: IntFilter<"cronograma"> | number
  }

  export type cronogramaOrderByWithRelationInput = {
    id?: SortOrder
    idCategoria?: SortOrder
    idPartido?: SortOrder
    idEquipo?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
  }

  export type cronogramaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: cronogramaWhereInput | cronogramaWhereInput[]
    OR?: cronogramaWhereInput[]
    NOT?: cronogramaWhereInput | cronogramaWhereInput[]
    idCategoria?: IntFilter<"cronograma"> | number
    idPartido?: IntFilter<"cronograma"> | number
    idEquipo?: IntFilter<"cronograma"> | number
    fecha?: IntFilter<"cronograma"> | number
    hora?: IntFilter<"cronograma"> | number
  }, "id">

  export type cronogramaOrderByWithAggregationInput = {
    id?: SortOrder
    idCategoria?: SortOrder
    idPartido?: SortOrder
    idEquipo?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    _count?: cronogramaCountOrderByAggregateInput
    _avg?: cronogramaAvgOrderByAggregateInput
    _max?: cronogramaMaxOrderByAggregateInput
    _min?: cronogramaMinOrderByAggregateInput
    _sum?: cronogramaSumOrderByAggregateInput
  }

  export type cronogramaScalarWhereWithAggregatesInput = {
    AND?: cronogramaScalarWhereWithAggregatesInput | cronogramaScalarWhereWithAggregatesInput[]
    OR?: cronogramaScalarWhereWithAggregatesInput[]
    NOT?: cronogramaScalarWhereWithAggregatesInput | cronogramaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"cronograma"> | number
    idCategoria?: IntWithAggregatesFilter<"cronograma"> | number
    idPartido?: IntWithAggregatesFilter<"cronograma"> | number
    idEquipo?: IntWithAggregatesFilter<"cronograma"> | number
    fecha?: IntWithAggregatesFilter<"cronograma"> | number
    hora?: IntWithAggregatesFilter<"cronograma"> | number
  }

  export type EquipoWhereInput = {
    AND?: EquipoWhereInput | EquipoWhereInput[]
    OR?: EquipoWhereInput[]
    NOT?: EquipoWhereInput | EquipoWhereInput[]
    id?: IntFilter<"Equipo"> | number
    nombre?: StringFilter<"Equipo"> | string
    idCategoria?: IntFilter<"Equipo"> | number
    jugadores?: JugadorListRelationFilter
  }

  export type EquipoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    idCategoria?: SortOrder
    jugadores?: JugadorOrderByRelationAggregateInput
  }

  export type EquipoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EquipoWhereInput | EquipoWhereInput[]
    OR?: EquipoWhereInput[]
    NOT?: EquipoWhereInput | EquipoWhereInput[]
    nombre?: StringFilter<"Equipo"> | string
    idCategoria?: IntFilter<"Equipo"> | number
    jugadores?: JugadorListRelationFilter
  }, "id">

  export type EquipoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    idCategoria?: SortOrder
    _count?: EquipoCountOrderByAggregateInput
    _avg?: EquipoAvgOrderByAggregateInput
    _max?: EquipoMaxOrderByAggregateInput
    _min?: EquipoMinOrderByAggregateInput
    _sum?: EquipoSumOrderByAggregateInput
  }

  export type EquipoScalarWhereWithAggregatesInput = {
    AND?: EquipoScalarWhereWithAggregatesInput | EquipoScalarWhereWithAggregatesInput[]
    OR?: EquipoScalarWhereWithAggregatesInput[]
    NOT?: EquipoScalarWhereWithAggregatesInput | EquipoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Equipo"> | number
    nombre?: StringWithAggregatesFilter<"Equipo"> | string
    idCategoria?: IntWithAggregatesFilter<"Equipo"> | number
  }

  export type JugadorWhereInput = {
    AND?: JugadorWhereInput | JugadorWhereInput[]
    OR?: JugadorWhereInput[]
    NOT?: JugadorWhereInput | JugadorWhereInput[]
    id?: IntFilter<"Jugador"> | number
    roll?: IntFilter<"Jugador"> | number
    nombre?: StringFilter<"Jugador"> | string
    dni?: StringFilter<"Jugador"> | string
    imagen?: StringFilter<"Jugador"> | string
    idEqupo?: IntNullableFilter<"Jugador"> | number | null
    equipo?: XOR<EquipoNullableRelationFilter, EquipoWhereInput> | null
  }

  export type JugadorOrderByWithRelationInput = {
    id?: SortOrder
    roll?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    imagen?: SortOrder
    idEqupo?: SortOrderInput | SortOrder
    equipo?: EquipoOrderByWithRelationInput
  }

  export type JugadorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JugadorWhereInput | JugadorWhereInput[]
    OR?: JugadorWhereInput[]
    NOT?: JugadorWhereInput | JugadorWhereInput[]
    roll?: IntFilter<"Jugador"> | number
    nombre?: StringFilter<"Jugador"> | string
    dni?: StringFilter<"Jugador"> | string
    imagen?: StringFilter<"Jugador"> | string
    idEqupo?: IntNullableFilter<"Jugador"> | number | null
    equipo?: XOR<EquipoNullableRelationFilter, EquipoWhereInput> | null
  }, "id">

  export type JugadorOrderByWithAggregationInput = {
    id?: SortOrder
    roll?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    imagen?: SortOrder
    idEqupo?: SortOrderInput | SortOrder
    _count?: JugadorCountOrderByAggregateInput
    _avg?: JugadorAvgOrderByAggregateInput
    _max?: JugadorMaxOrderByAggregateInput
    _min?: JugadorMinOrderByAggregateInput
    _sum?: JugadorSumOrderByAggregateInput
  }

  export type JugadorScalarWhereWithAggregatesInput = {
    AND?: JugadorScalarWhereWithAggregatesInput | JugadorScalarWhereWithAggregatesInput[]
    OR?: JugadorScalarWhereWithAggregatesInput[]
    NOT?: JugadorScalarWhereWithAggregatesInput | JugadorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Jugador"> | number
    roll?: IntWithAggregatesFilter<"Jugador"> | number
    nombre?: StringWithAggregatesFilter<"Jugador"> | string
    dni?: StringWithAggregatesFilter<"Jugador"> | string
    imagen?: StringWithAggregatesFilter<"Jugador"> | string
    idEqupo?: IntNullableWithAggregatesFilter<"Jugador"> | number | null
  }

  export type partidoWhereInput = {
    AND?: partidoWhereInput | partidoWhereInput[]
    OR?: partidoWhereInput[]
    NOT?: partidoWhereInput | partidoWhereInput[]
    id?: IntFilter<"partido"> | number
    estado?: IntFilter<"partido"> | number
    equipo1?: IntFilter<"partido"> | number
    equipo2?: IntFilter<"partido"> | number
    hora?: StringFilter<"partido"> | string
    fecha?: DateTimeFilter<"partido"> | Date | string
  }

  export type partidoOrderByWithRelationInput = {
    id?: SortOrder
    estado?: SortOrder
    equipo1?: SortOrder
    equipo2?: SortOrder
    hora?: SortOrder
    fecha?: SortOrder
  }

  export type partidoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: partidoWhereInput | partidoWhereInput[]
    OR?: partidoWhereInput[]
    NOT?: partidoWhereInput | partidoWhereInput[]
    estado?: IntFilter<"partido"> | number
    equipo1?: IntFilter<"partido"> | number
    equipo2?: IntFilter<"partido"> | number
    hora?: StringFilter<"partido"> | string
    fecha?: DateTimeFilter<"partido"> | Date | string
  }, "id">

  export type partidoOrderByWithAggregationInput = {
    id?: SortOrder
    estado?: SortOrder
    equipo1?: SortOrder
    equipo2?: SortOrder
    hora?: SortOrder
    fecha?: SortOrder
    _count?: partidoCountOrderByAggregateInput
    _avg?: partidoAvgOrderByAggregateInput
    _max?: partidoMaxOrderByAggregateInput
    _min?: partidoMinOrderByAggregateInput
    _sum?: partidoSumOrderByAggregateInput
  }

  export type partidoScalarWhereWithAggregatesInput = {
    AND?: partidoScalarWhereWithAggregatesInput | partidoScalarWhereWithAggregatesInput[]
    OR?: partidoScalarWhereWithAggregatesInput[]
    NOT?: partidoScalarWhereWithAggregatesInput | partidoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"partido"> | number
    estado?: IntWithAggregatesFilter<"partido"> | number
    equipo1?: IntWithAggregatesFilter<"partido"> | number
    equipo2?: IntWithAggregatesFilter<"partido"> | number
    hora?: StringWithAggregatesFilter<"partido"> | string
    fecha?: DateTimeWithAggregatesFilter<"partido"> | Date | string
  }

  export type torneoWhereInput = {
    AND?: torneoWhereInput | torneoWhereInput[]
    OR?: torneoWhereInput[]
    NOT?: torneoWhereInput | torneoWhereInput[]
    id?: IntFilter<"torneo"> | number
    nombre?: StringFilter<"torneo"> | string
    categorias?: CategoriaListRelationFilter
  }

  export type torneoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    categorias?: categoriaOrderByRelationAggregateInput
  }

  export type torneoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: torneoWhereInput | torneoWhereInput[]
    OR?: torneoWhereInput[]
    NOT?: torneoWhereInput | torneoWhereInput[]
    nombre?: StringFilter<"torneo"> | string
    categorias?: CategoriaListRelationFilter
  }, "id">

  export type torneoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    _count?: torneoCountOrderByAggregateInput
    _avg?: torneoAvgOrderByAggregateInput
    _max?: torneoMaxOrderByAggregateInput
    _min?: torneoMinOrderByAggregateInput
    _sum?: torneoSumOrderByAggregateInput
  }

  export type torneoScalarWhereWithAggregatesInput = {
    AND?: torneoScalarWhereWithAggregatesInput | torneoScalarWhereWithAggregatesInput[]
    OR?: torneoScalarWhereWithAggregatesInput[]
    NOT?: torneoScalarWhereWithAggregatesInput | torneoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"torneo"> | number
    nombre?: StringWithAggregatesFilter<"torneo"> | string
  }

  export type categoriaCreateInput = {
    nombre: string
    dificultad: string
    torneo?: torneoCreateNestedOneWithoutCategoriasInput
  }

  export type categoriaUncheckedCreateInput = {
    id?: number
    idTorneo: number
    nombre: string
    dificultad: string
  }

  export type categoriaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    dificultad?: StringFieldUpdateOperationsInput | string
    torneo?: torneoUpdateOneWithoutCategoriasNestedInput
  }

  export type categoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idTorneo?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dificultad?: StringFieldUpdateOperationsInput | string
  }

  export type categoriaCreateManyInput = {
    id?: number
    idTorneo: number
    nombre: string
    dificultad: string
  }

  export type categoriaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    dificultad?: StringFieldUpdateOperationsInput | string
  }

  export type categoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idTorneo?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dificultad?: StringFieldUpdateOperationsInput | string
  }

  export type cronogramaCreateInput = {
    idCategoria: number
    idPartido: number
    idEquipo: number
    fecha: number
    hora: number
  }

  export type cronogramaUncheckedCreateInput = {
    id?: number
    idCategoria: number
    idPartido: number
    idEquipo: number
    fecha: number
    hora: number
  }

  export type cronogramaUpdateInput = {
    idCategoria?: IntFieldUpdateOperationsInput | number
    idPartido?: IntFieldUpdateOperationsInput | number
    idEquipo?: IntFieldUpdateOperationsInput | number
    fecha?: IntFieldUpdateOperationsInput | number
    hora?: IntFieldUpdateOperationsInput | number
  }

  export type cronogramaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idCategoria?: IntFieldUpdateOperationsInput | number
    idPartido?: IntFieldUpdateOperationsInput | number
    idEquipo?: IntFieldUpdateOperationsInput | number
    fecha?: IntFieldUpdateOperationsInput | number
    hora?: IntFieldUpdateOperationsInput | number
  }

  export type cronogramaCreateManyInput = {
    id?: number
    idCategoria: number
    idPartido: number
    idEquipo: number
    fecha: number
    hora: number
  }

  export type cronogramaUpdateManyMutationInput = {
    idCategoria?: IntFieldUpdateOperationsInput | number
    idPartido?: IntFieldUpdateOperationsInput | number
    idEquipo?: IntFieldUpdateOperationsInput | number
    fecha?: IntFieldUpdateOperationsInput | number
    hora?: IntFieldUpdateOperationsInput | number
  }

  export type cronogramaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idCategoria?: IntFieldUpdateOperationsInput | number
    idPartido?: IntFieldUpdateOperationsInput | number
    idEquipo?: IntFieldUpdateOperationsInput | number
    fecha?: IntFieldUpdateOperationsInput | number
    hora?: IntFieldUpdateOperationsInput | number
  }

  export type EquipoCreateInput = {
    nombre: string
    idCategoria: number
    jugadores?: JugadorCreateNestedManyWithoutEquipoInput
  }

  export type EquipoUncheckedCreateInput = {
    id?: number
    nombre: string
    idCategoria: number
    jugadores?: JugadorUncheckedCreateNestedManyWithoutEquipoInput
  }

  export type EquipoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    idCategoria?: IntFieldUpdateOperationsInput | number
    jugadores?: JugadorUpdateManyWithoutEquipoNestedInput
  }

  export type EquipoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    idCategoria?: IntFieldUpdateOperationsInput | number
    jugadores?: JugadorUncheckedUpdateManyWithoutEquipoNestedInput
  }

  export type EquipoCreateManyInput = {
    id?: number
    nombre: string
    idCategoria: number
  }

  export type EquipoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    idCategoria?: IntFieldUpdateOperationsInput | number
  }

  export type EquipoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    idCategoria?: IntFieldUpdateOperationsInput | number
  }

  export type JugadorCreateInput = {
    roll: number
    nombre: string
    dni: string
    imagen: string
    equipo?: EquipoCreateNestedOneWithoutJugadoresInput
  }

  export type JugadorUncheckedCreateInput = {
    id?: number
    roll: number
    nombre: string
    dni: string
    imagen: string
    idEqupo?: number | null
  }

  export type JugadorUpdateInput = {
    roll?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    equipo?: EquipoUpdateOneWithoutJugadoresNestedInput
  }

  export type JugadorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roll?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    idEqupo?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type JugadorCreateManyInput = {
    id?: number
    roll: number
    nombre: string
    dni: string
    imagen: string
    idEqupo?: number | null
  }

  export type JugadorUpdateManyMutationInput = {
    roll?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
  }

  export type JugadorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roll?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    idEqupo?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type partidoCreateInput = {
    estado: number
    equipo1: number
    equipo2: number
    hora: string
    fecha: Date | string
  }

  export type partidoUncheckedCreateInput = {
    id?: number
    estado: number
    equipo1: number
    equipo2: number
    hora: string
    fecha: Date | string
  }

  export type partidoUpdateInput = {
    estado?: IntFieldUpdateOperationsInput | number
    equipo1?: IntFieldUpdateOperationsInput | number
    equipo2?: IntFieldUpdateOperationsInput | number
    hora?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type partidoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    estado?: IntFieldUpdateOperationsInput | number
    equipo1?: IntFieldUpdateOperationsInput | number
    equipo2?: IntFieldUpdateOperationsInput | number
    hora?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type partidoCreateManyInput = {
    id?: number
    estado: number
    equipo1: number
    equipo2: number
    hora: string
    fecha: Date | string
  }

  export type partidoUpdateManyMutationInput = {
    estado?: IntFieldUpdateOperationsInput | number
    equipo1?: IntFieldUpdateOperationsInput | number
    equipo2?: IntFieldUpdateOperationsInput | number
    hora?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type partidoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    estado?: IntFieldUpdateOperationsInput | number
    equipo1?: IntFieldUpdateOperationsInput | number
    equipo2?: IntFieldUpdateOperationsInput | number
    hora?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type torneoCreateInput = {
    nombre: string
    categorias?: categoriaCreateNestedManyWithoutTorneoInput
  }

  export type torneoUncheckedCreateInput = {
    id?: number
    nombre: string
    categorias?: categoriaUncheckedCreateNestedManyWithoutTorneoInput
  }

  export type torneoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    categorias?: categoriaUpdateManyWithoutTorneoNestedInput
  }

  export type torneoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    categorias?: categoriaUncheckedUpdateManyWithoutTorneoNestedInput
  }

  export type torneoCreateManyInput = {
    id?: number
    nombre: string
  }

  export type torneoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type torneoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type TorneoNullableRelationFilter = {
    is?: torneoWhereInput | null
    isNot?: torneoWhereInput | null
  }

  export type categoriaCountOrderByAggregateInput = {
    id?: SortOrder
    idTorneo?: SortOrder
    nombre?: SortOrder
    dificultad?: SortOrder
  }

  export type categoriaAvgOrderByAggregateInput = {
    id?: SortOrder
    idTorneo?: SortOrder
  }

  export type categoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    idTorneo?: SortOrder
    nombre?: SortOrder
    dificultad?: SortOrder
  }

  export type categoriaMinOrderByAggregateInput = {
    id?: SortOrder
    idTorneo?: SortOrder
    nombre?: SortOrder
    dificultad?: SortOrder
  }

  export type categoriaSumOrderByAggregateInput = {
    id?: SortOrder
    idTorneo?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type cronogramaCountOrderByAggregateInput = {
    id?: SortOrder
    idCategoria?: SortOrder
    idPartido?: SortOrder
    idEquipo?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
  }

  export type cronogramaAvgOrderByAggregateInput = {
    id?: SortOrder
    idCategoria?: SortOrder
    idPartido?: SortOrder
    idEquipo?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
  }

  export type cronogramaMaxOrderByAggregateInput = {
    id?: SortOrder
    idCategoria?: SortOrder
    idPartido?: SortOrder
    idEquipo?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
  }

  export type cronogramaMinOrderByAggregateInput = {
    id?: SortOrder
    idCategoria?: SortOrder
    idPartido?: SortOrder
    idEquipo?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
  }

  export type cronogramaSumOrderByAggregateInput = {
    id?: SortOrder
    idCategoria?: SortOrder
    idPartido?: SortOrder
    idEquipo?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
  }

  export type JugadorListRelationFilter = {
    every?: JugadorWhereInput
    some?: JugadorWhereInput
    none?: JugadorWhereInput
  }

  export type JugadorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EquipoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    idCategoria?: SortOrder
  }

  export type EquipoAvgOrderByAggregateInput = {
    id?: SortOrder
    idCategoria?: SortOrder
  }

  export type EquipoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    idCategoria?: SortOrder
  }

  export type EquipoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    idCategoria?: SortOrder
  }

  export type EquipoSumOrderByAggregateInput = {
    id?: SortOrder
    idCategoria?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EquipoNullableRelationFilter = {
    is?: EquipoWhereInput | null
    isNot?: EquipoWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type JugadorCountOrderByAggregateInput = {
    id?: SortOrder
    roll?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    imagen?: SortOrder
    idEqupo?: SortOrder
  }

  export type JugadorAvgOrderByAggregateInput = {
    id?: SortOrder
    roll?: SortOrder
    idEqupo?: SortOrder
  }

  export type JugadorMaxOrderByAggregateInput = {
    id?: SortOrder
    roll?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    imagen?: SortOrder
    idEqupo?: SortOrder
  }

  export type JugadorMinOrderByAggregateInput = {
    id?: SortOrder
    roll?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    imagen?: SortOrder
    idEqupo?: SortOrder
  }

  export type JugadorSumOrderByAggregateInput = {
    id?: SortOrder
    roll?: SortOrder
    idEqupo?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type partidoCountOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
    equipo1?: SortOrder
    equipo2?: SortOrder
    hora?: SortOrder
    fecha?: SortOrder
  }

  export type partidoAvgOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
    equipo1?: SortOrder
    equipo2?: SortOrder
  }

  export type partidoMaxOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
    equipo1?: SortOrder
    equipo2?: SortOrder
    hora?: SortOrder
    fecha?: SortOrder
  }

  export type partidoMinOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
    equipo1?: SortOrder
    equipo2?: SortOrder
    hora?: SortOrder
    fecha?: SortOrder
  }

  export type partidoSumOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
    equipo1?: SortOrder
    equipo2?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CategoriaListRelationFilter = {
    every?: categoriaWhereInput
    some?: categoriaWhereInput
    none?: categoriaWhereInput
  }

  export type categoriaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type torneoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type torneoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type torneoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type torneoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type torneoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type torneoCreateNestedOneWithoutCategoriasInput = {
    create?: XOR<torneoCreateWithoutCategoriasInput, torneoUncheckedCreateWithoutCategoriasInput>
    connectOrCreate?: torneoCreateOrConnectWithoutCategoriasInput
    connect?: torneoWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type torneoUpdateOneWithoutCategoriasNestedInput = {
    create?: XOR<torneoCreateWithoutCategoriasInput, torneoUncheckedCreateWithoutCategoriasInput>
    connectOrCreate?: torneoCreateOrConnectWithoutCategoriasInput
    upsert?: torneoUpsertWithoutCategoriasInput
    disconnect?: torneoWhereInput | boolean
    delete?: torneoWhereInput | boolean
    connect?: torneoWhereUniqueInput
    update?: XOR<XOR<torneoUpdateToOneWithWhereWithoutCategoriasInput, torneoUpdateWithoutCategoriasInput>, torneoUncheckedUpdateWithoutCategoriasInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JugadorCreateNestedManyWithoutEquipoInput = {
    create?: XOR<JugadorCreateWithoutEquipoInput, JugadorUncheckedCreateWithoutEquipoInput> | JugadorCreateWithoutEquipoInput[] | JugadorUncheckedCreateWithoutEquipoInput[]
    connectOrCreate?: JugadorCreateOrConnectWithoutEquipoInput | JugadorCreateOrConnectWithoutEquipoInput[]
    createMany?: JugadorCreateManyEquipoInputEnvelope
    connect?: JugadorWhereUniqueInput | JugadorWhereUniqueInput[]
  }

  export type JugadorUncheckedCreateNestedManyWithoutEquipoInput = {
    create?: XOR<JugadorCreateWithoutEquipoInput, JugadorUncheckedCreateWithoutEquipoInput> | JugadorCreateWithoutEquipoInput[] | JugadorUncheckedCreateWithoutEquipoInput[]
    connectOrCreate?: JugadorCreateOrConnectWithoutEquipoInput | JugadorCreateOrConnectWithoutEquipoInput[]
    createMany?: JugadorCreateManyEquipoInputEnvelope
    connect?: JugadorWhereUniqueInput | JugadorWhereUniqueInput[]
  }

  export type JugadorUpdateManyWithoutEquipoNestedInput = {
    create?: XOR<JugadorCreateWithoutEquipoInput, JugadorUncheckedCreateWithoutEquipoInput> | JugadorCreateWithoutEquipoInput[] | JugadorUncheckedCreateWithoutEquipoInput[]
    connectOrCreate?: JugadorCreateOrConnectWithoutEquipoInput | JugadorCreateOrConnectWithoutEquipoInput[]
    upsert?: JugadorUpsertWithWhereUniqueWithoutEquipoInput | JugadorUpsertWithWhereUniqueWithoutEquipoInput[]
    createMany?: JugadorCreateManyEquipoInputEnvelope
    set?: JugadorWhereUniqueInput | JugadorWhereUniqueInput[]
    disconnect?: JugadorWhereUniqueInput | JugadorWhereUniqueInput[]
    delete?: JugadorWhereUniqueInput | JugadorWhereUniqueInput[]
    connect?: JugadorWhereUniqueInput | JugadorWhereUniqueInput[]
    update?: JugadorUpdateWithWhereUniqueWithoutEquipoInput | JugadorUpdateWithWhereUniqueWithoutEquipoInput[]
    updateMany?: JugadorUpdateManyWithWhereWithoutEquipoInput | JugadorUpdateManyWithWhereWithoutEquipoInput[]
    deleteMany?: JugadorScalarWhereInput | JugadorScalarWhereInput[]
  }

  export type JugadorUncheckedUpdateManyWithoutEquipoNestedInput = {
    create?: XOR<JugadorCreateWithoutEquipoInput, JugadorUncheckedCreateWithoutEquipoInput> | JugadorCreateWithoutEquipoInput[] | JugadorUncheckedCreateWithoutEquipoInput[]
    connectOrCreate?: JugadorCreateOrConnectWithoutEquipoInput | JugadorCreateOrConnectWithoutEquipoInput[]
    upsert?: JugadorUpsertWithWhereUniqueWithoutEquipoInput | JugadorUpsertWithWhereUniqueWithoutEquipoInput[]
    createMany?: JugadorCreateManyEquipoInputEnvelope
    set?: JugadorWhereUniqueInput | JugadorWhereUniqueInput[]
    disconnect?: JugadorWhereUniqueInput | JugadorWhereUniqueInput[]
    delete?: JugadorWhereUniqueInput | JugadorWhereUniqueInput[]
    connect?: JugadorWhereUniqueInput | JugadorWhereUniqueInput[]
    update?: JugadorUpdateWithWhereUniqueWithoutEquipoInput | JugadorUpdateWithWhereUniqueWithoutEquipoInput[]
    updateMany?: JugadorUpdateManyWithWhereWithoutEquipoInput | JugadorUpdateManyWithWhereWithoutEquipoInput[]
    deleteMany?: JugadorScalarWhereInput | JugadorScalarWhereInput[]
  }

  export type EquipoCreateNestedOneWithoutJugadoresInput = {
    create?: XOR<EquipoCreateWithoutJugadoresInput, EquipoUncheckedCreateWithoutJugadoresInput>
    connectOrCreate?: EquipoCreateOrConnectWithoutJugadoresInput
    connect?: EquipoWhereUniqueInput
  }

  export type EquipoUpdateOneWithoutJugadoresNestedInput = {
    create?: XOR<EquipoCreateWithoutJugadoresInput, EquipoUncheckedCreateWithoutJugadoresInput>
    connectOrCreate?: EquipoCreateOrConnectWithoutJugadoresInput
    upsert?: EquipoUpsertWithoutJugadoresInput
    disconnect?: EquipoWhereInput | boolean
    delete?: EquipoWhereInput | boolean
    connect?: EquipoWhereUniqueInput
    update?: XOR<XOR<EquipoUpdateToOneWithWhereWithoutJugadoresInput, EquipoUpdateWithoutJugadoresInput>, EquipoUncheckedUpdateWithoutJugadoresInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type categoriaCreateNestedManyWithoutTorneoInput = {
    create?: XOR<categoriaCreateWithoutTorneoInput, categoriaUncheckedCreateWithoutTorneoInput> | categoriaCreateWithoutTorneoInput[] | categoriaUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: categoriaCreateOrConnectWithoutTorneoInput | categoriaCreateOrConnectWithoutTorneoInput[]
    createMany?: categoriaCreateManyTorneoInputEnvelope
    connect?: categoriaWhereUniqueInput | categoriaWhereUniqueInput[]
  }

  export type categoriaUncheckedCreateNestedManyWithoutTorneoInput = {
    create?: XOR<categoriaCreateWithoutTorneoInput, categoriaUncheckedCreateWithoutTorneoInput> | categoriaCreateWithoutTorneoInput[] | categoriaUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: categoriaCreateOrConnectWithoutTorneoInput | categoriaCreateOrConnectWithoutTorneoInput[]
    createMany?: categoriaCreateManyTorneoInputEnvelope
    connect?: categoriaWhereUniqueInput | categoriaWhereUniqueInput[]
  }

  export type categoriaUpdateManyWithoutTorneoNestedInput = {
    create?: XOR<categoriaCreateWithoutTorneoInput, categoriaUncheckedCreateWithoutTorneoInput> | categoriaCreateWithoutTorneoInput[] | categoriaUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: categoriaCreateOrConnectWithoutTorneoInput | categoriaCreateOrConnectWithoutTorneoInput[]
    upsert?: categoriaUpsertWithWhereUniqueWithoutTorneoInput | categoriaUpsertWithWhereUniqueWithoutTorneoInput[]
    createMany?: categoriaCreateManyTorneoInputEnvelope
    set?: categoriaWhereUniqueInput | categoriaWhereUniqueInput[]
    disconnect?: categoriaWhereUniqueInput | categoriaWhereUniqueInput[]
    delete?: categoriaWhereUniqueInput | categoriaWhereUniqueInput[]
    connect?: categoriaWhereUniqueInput | categoriaWhereUniqueInput[]
    update?: categoriaUpdateWithWhereUniqueWithoutTorneoInput | categoriaUpdateWithWhereUniqueWithoutTorneoInput[]
    updateMany?: categoriaUpdateManyWithWhereWithoutTorneoInput | categoriaUpdateManyWithWhereWithoutTorneoInput[]
    deleteMany?: categoriaScalarWhereInput | categoriaScalarWhereInput[]
  }

  export type categoriaUncheckedUpdateManyWithoutTorneoNestedInput = {
    create?: XOR<categoriaCreateWithoutTorneoInput, categoriaUncheckedCreateWithoutTorneoInput> | categoriaCreateWithoutTorneoInput[] | categoriaUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: categoriaCreateOrConnectWithoutTorneoInput | categoriaCreateOrConnectWithoutTorneoInput[]
    upsert?: categoriaUpsertWithWhereUniqueWithoutTorneoInput | categoriaUpsertWithWhereUniqueWithoutTorneoInput[]
    createMany?: categoriaCreateManyTorneoInputEnvelope
    set?: categoriaWhereUniqueInput | categoriaWhereUniqueInput[]
    disconnect?: categoriaWhereUniqueInput | categoriaWhereUniqueInput[]
    delete?: categoriaWhereUniqueInput | categoriaWhereUniqueInput[]
    connect?: categoriaWhereUniqueInput | categoriaWhereUniqueInput[]
    update?: categoriaUpdateWithWhereUniqueWithoutTorneoInput | categoriaUpdateWithWhereUniqueWithoutTorneoInput[]
    updateMany?: categoriaUpdateManyWithWhereWithoutTorneoInput | categoriaUpdateManyWithWhereWithoutTorneoInput[]
    deleteMany?: categoriaScalarWhereInput | categoriaScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type torneoCreateWithoutCategoriasInput = {
    nombre: string
  }

  export type torneoUncheckedCreateWithoutCategoriasInput = {
    id?: number
    nombre: string
  }

  export type torneoCreateOrConnectWithoutCategoriasInput = {
    where: torneoWhereUniqueInput
    create: XOR<torneoCreateWithoutCategoriasInput, torneoUncheckedCreateWithoutCategoriasInput>
  }

  export type torneoUpsertWithoutCategoriasInput = {
    update: XOR<torneoUpdateWithoutCategoriasInput, torneoUncheckedUpdateWithoutCategoriasInput>
    create: XOR<torneoCreateWithoutCategoriasInput, torneoUncheckedCreateWithoutCategoriasInput>
    where?: torneoWhereInput
  }

  export type torneoUpdateToOneWithWhereWithoutCategoriasInput = {
    where?: torneoWhereInput
    data: XOR<torneoUpdateWithoutCategoriasInput, torneoUncheckedUpdateWithoutCategoriasInput>
  }

  export type torneoUpdateWithoutCategoriasInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type torneoUncheckedUpdateWithoutCategoriasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type JugadorCreateWithoutEquipoInput = {
    roll: number
    nombre: string
    dni: string
    imagen: string
  }

  export type JugadorUncheckedCreateWithoutEquipoInput = {
    id?: number
    roll: number
    nombre: string
    dni: string
    imagen: string
  }

  export type JugadorCreateOrConnectWithoutEquipoInput = {
    where: JugadorWhereUniqueInput
    create: XOR<JugadorCreateWithoutEquipoInput, JugadorUncheckedCreateWithoutEquipoInput>
  }

  export type JugadorCreateManyEquipoInputEnvelope = {
    data: JugadorCreateManyEquipoInput | JugadorCreateManyEquipoInput[]
    skipDuplicates?: boolean
  }

  export type JugadorUpsertWithWhereUniqueWithoutEquipoInput = {
    where: JugadorWhereUniqueInput
    update: XOR<JugadorUpdateWithoutEquipoInput, JugadorUncheckedUpdateWithoutEquipoInput>
    create: XOR<JugadorCreateWithoutEquipoInput, JugadorUncheckedCreateWithoutEquipoInput>
  }

  export type JugadorUpdateWithWhereUniqueWithoutEquipoInput = {
    where: JugadorWhereUniqueInput
    data: XOR<JugadorUpdateWithoutEquipoInput, JugadorUncheckedUpdateWithoutEquipoInput>
  }

  export type JugadorUpdateManyWithWhereWithoutEquipoInput = {
    where: JugadorScalarWhereInput
    data: XOR<JugadorUpdateManyMutationInput, JugadorUncheckedUpdateManyWithoutEquipoInput>
  }

  export type JugadorScalarWhereInput = {
    AND?: JugadorScalarWhereInput | JugadorScalarWhereInput[]
    OR?: JugadorScalarWhereInput[]
    NOT?: JugadorScalarWhereInput | JugadorScalarWhereInput[]
    id?: IntFilter<"Jugador"> | number
    roll?: IntFilter<"Jugador"> | number
    nombre?: StringFilter<"Jugador"> | string
    dni?: StringFilter<"Jugador"> | string
    imagen?: StringFilter<"Jugador"> | string
    idEqupo?: IntNullableFilter<"Jugador"> | number | null
  }

  export type EquipoCreateWithoutJugadoresInput = {
    nombre: string
    idCategoria: number
  }

  export type EquipoUncheckedCreateWithoutJugadoresInput = {
    id?: number
    nombre: string
    idCategoria: number
  }

  export type EquipoCreateOrConnectWithoutJugadoresInput = {
    where: EquipoWhereUniqueInput
    create: XOR<EquipoCreateWithoutJugadoresInput, EquipoUncheckedCreateWithoutJugadoresInput>
  }

  export type EquipoUpsertWithoutJugadoresInput = {
    update: XOR<EquipoUpdateWithoutJugadoresInput, EquipoUncheckedUpdateWithoutJugadoresInput>
    create: XOR<EquipoCreateWithoutJugadoresInput, EquipoUncheckedCreateWithoutJugadoresInput>
    where?: EquipoWhereInput
  }

  export type EquipoUpdateToOneWithWhereWithoutJugadoresInput = {
    where?: EquipoWhereInput
    data: XOR<EquipoUpdateWithoutJugadoresInput, EquipoUncheckedUpdateWithoutJugadoresInput>
  }

  export type EquipoUpdateWithoutJugadoresInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    idCategoria?: IntFieldUpdateOperationsInput | number
  }

  export type EquipoUncheckedUpdateWithoutJugadoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    idCategoria?: IntFieldUpdateOperationsInput | number
  }

  export type categoriaCreateWithoutTorneoInput = {
    nombre: string
    dificultad: string
  }

  export type categoriaUncheckedCreateWithoutTorneoInput = {
    id?: number
    nombre: string
    dificultad: string
  }

  export type categoriaCreateOrConnectWithoutTorneoInput = {
    where: categoriaWhereUniqueInput
    create: XOR<categoriaCreateWithoutTorneoInput, categoriaUncheckedCreateWithoutTorneoInput>
  }

  export type categoriaCreateManyTorneoInputEnvelope = {
    data: categoriaCreateManyTorneoInput | categoriaCreateManyTorneoInput[]
    skipDuplicates?: boolean
  }

  export type categoriaUpsertWithWhereUniqueWithoutTorneoInput = {
    where: categoriaWhereUniqueInput
    update: XOR<categoriaUpdateWithoutTorneoInput, categoriaUncheckedUpdateWithoutTorneoInput>
    create: XOR<categoriaCreateWithoutTorneoInput, categoriaUncheckedCreateWithoutTorneoInput>
  }

  export type categoriaUpdateWithWhereUniqueWithoutTorneoInput = {
    where: categoriaWhereUniqueInput
    data: XOR<categoriaUpdateWithoutTorneoInput, categoriaUncheckedUpdateWithoutTorneoInput>
  }

  export type categoriaUpdateManyWithWhereWithoutTorneoInput = {
    where: categoriaScalarWhereInput
    data: XOR<categoriaUpdateManyMutationInput, categoriaUncheckedUpdateManyWithoutTorneoInput>
  }

  export type categoriaScalarWhereInput = {
    AND?: categoriaScalarWhereInput | categoriaScalarWhereInput[]
    OR?: categoriaScalarWhereInput[]
    NOT?: categoriaScalarWhereInput | categoriaScalarWhereInput[]
    id?: IntFilter<"categoria"> | number
    idTorneo?: IntFilter<"categoria"> | number
    nombre?: StringFilter<"categoria"> | string
    dificultad?: StringFilter<"categoria"> | string
  }

  export type JugadorCreateManyEquipoInput = {
    id?: number
    roll: number
    nombre: string
    dni: string
    imagen: string
  }

  export type JugadorUpdateWithoutEquipoInput = {
    roll?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
  }

  export type JugadorUncheckedUpdateWithoutEquipoInput = {
    id?: IntFieldUpdateOperationsInput | number
    roll?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
  }

  export type JugadorUncheckedUpdateManyWithoutEquipoInput = {
    id?: IntFieldUpdateOperationsInput | number
    roll?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
  }

  export type categoriaCreateManyTorneoInput = {
    id?: number
    nombre: string
    dificultad: string
  }

  export type categoriaUpdateWithoutTorneoInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    dificultad?: StringFieldUpdateOperationsInput | string
  }

  export type categoriaUncheckedUpdateWithoutTorneoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dificultad?: StringFieldUpdateOperationsInput | string
  }

  export type categoriaUncheckedUpdateManyWithoutTorneoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dificultad?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use EquipoCountOutputTypeDefaultArgs instead
     */
    export type EquipoCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = EquipoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TorneoCountOutputTypeDefaultArgs instead
     */
    export type TorneoCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = TorneoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoriaDefaultArgs instead
     */
    export type categoriaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = categoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use cronogramaDefaultArgs instead
     */
    export type cronogramaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = cronogramaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EquipoDefaultArgs instead
     */
    export type EquipoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = EquipoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JugadorDefaultArgs instead
     */
    export type JugadorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = JugadorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use partidoDefaultArgs instead
     */
    export type partidoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = partidoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use torneoDefaultArgs instead
     */
    export type torneoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = torneoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}